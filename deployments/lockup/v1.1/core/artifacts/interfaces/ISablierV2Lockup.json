{
  "abi": [
    {
      "type": "function",
      "name": "MAX_FEE",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "UD60x18" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "admin",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "approve",
      "inputs": [
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [{ "name": "owner", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "balance", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "burn",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cancel",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "cancelMultiple",
      "inputs": [{ "name": "streamIds", "type": "uint256[]", "internalType": "uint256[]" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "claimProtocolRevenues",
      "inputs": [{ "name": "asset", "type": "address", "internalType": "contract IERC20" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "comptroller",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "contract ISablierV2Comptroller" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getApproved",
      "inputs": [{ "name": "tokenId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "operator", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getAsset",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "asset", "type": "address", "internalType": "contract IERC20" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getDepositedAmount",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "depositedAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getEndTime",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "endTime", "type": "uint40", "internalType": "uint40" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRecipient",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "recipient", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRefundedAmount",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "refundedAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSender",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "sender", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getStartTime",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "startTime", "type": "uint40", "internalType": "uint40" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getWithdrawnAmount",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "withdrawnAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isApprovedForAll",
      "inputs": [
        { "name": "owner", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" }
      ],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isCancelable",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isCold",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isDepleted",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isStream",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isTransferable",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isWarm",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "nextStreamId",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "ownerOf",
      "inputs": [{ "name": "tokenId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "owner", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "protocolRevenues",
      "inputs": [{ "name": "asset", "type": "address", "internalType": "contract IERC20" }],
      "outputs": [{ "name": "revenues", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "refundableAmountOf",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "refundableAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "renounce",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" },
        { "name": "data", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setApprovalForAll",
      "inputs": [
        { "name": "operator", "type": "address", "internalType": "address" },
        { "name": "approved", "type": "bool", "internalType": "bool" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setComptroller",
      "inputs": [{ "name": "newComptroller", "type": "address", "internalType": "contract ISablierV2Comptroller" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setNFTDescriptor",
      "inputs": [{ "name": "newNFTDescriptor", "type": "address", "internalType": "contract ISablierV2NFTDescriptor" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "statusOf",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "status", "type": "uint8", "internalType": "enum Lockup.Status" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "streamedAmountOf",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "streamedAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [{ "name": "interfaceId", "type": "bytes4", "internalType": "bytes4" }],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "symbol",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenURI",
      "inputs": [{ "name": "tokenId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferAdmin",
      "inputs": [{ "name": "newAdmin", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "wasCanceled",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "result", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdraw",
      "inputs": [
        { "name": "streamId", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint128", "internalType": "uint128" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawMax",
      "inputs": [
        { "name": "streamId", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawMaxAndTransfer",
      "inputs": [
        { "name": "streamId", "type": "uint256", "internalType": "uint256" },
        { "name": "newRecipient", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawMultiple",
      "inputs": [
        { "name": "streamIds", "type": "uint256[]", "internalType": "uint256[]" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amounts", "type": "uint128[]", "internalType": "uint128[]" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawableAmountOf",
      "inputs": [{ "name": "streamId", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "withdrawableAmount", "type": "uint128", "internalType": "uint128" }],
      "stateMutability": "view"
    },
    {
      "type": "event",
      "name": "Approval",
      "inputs": [
        { "name": "owner", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "approved", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ApprovalForAll",
      "inputs": [
        { "name": "owner", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "operator", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "approved", "type": "bool", "indexed": false, "internalType": "bool" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CancelLockupStream",
      "inputs": [
        { "name": "streamId", "type": "uint256", "indexed": false, "internalType": "uint256" },
        { "name": "sender", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "recipient", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "asset", "type": "address", "indexed": true, "internalType": "contract IERC20" },
        { "name": "senderAmount", "type": "uint128", "indexed": false, "internalType": "uint128" },
        { "name": "recipientAmount", "type": "uint128", "indexed": false, "internalType": "uint128" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ClaimProtocolRevenues",
      "inputs": [
        { "name": "admin", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "asset", "type": "address", "indexed": true, "internalType": "contract IERC20" },
        { "name": "protocolRevenues", "type": "uint128", "indexed": false, "internalType": "uint128" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RenounceLockupStream",
      "inputs": [{ "name": "streamId", "type": "uint256", "indexed": true, "internalType": "uint256" }],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SetComptroller",
      "inputs": [
        { "name": "admin", "type": "address", "indexed": true, "internalType": "address" },
        {
          "name": "oldComptroller",
          "type": "address",
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller"
        },
        {
          "name": "newComptroller",
          "type": "address",
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SetNFTDescriptor",
      "inputs": [
        { "name": "admin", "type": "address", "indexed": true, "internalType": "address" },
        {
          "name": "oldNFTDescriptor",
          "type": "address",
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor"
        },
        {
          "name": "newNFTDescriptor",
          "type": "address",
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Transfer",
      "inputs": [
        { "name": "from", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "to", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "indexed": true, "internalType": "uint256" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TransferAdmin",
      "inputs": [
        { "name": "oldAdmin", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "newAdmin", "type": "address", "indexed": true, "internalType": "address" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WithdrawFromLockupStream",
      "inputs": [
        { "name": "streamId", "type": "uint256", "indexed": true, "internalType": "uint256" },
        { "name": "to", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "asset", "type": "address", "indexed": true, "internalType": "contract IERC20" },
        { "name": "amount", "type": "uint128", "indexed": false, "internalType": "uint128" }
      ],
      "anonymous": false
    }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "MAX_FEE()": "bc063e1a",
    "admin()": "f851a440",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "cancel(uint256)": "40e58ee5",
    "cancelMultiple(uint256[])": "8659c270",
    "claimProtocolRevenues(address)": "a6202bf2",
    "comptroller()": "5fe3b567",
    "getApproved(uint256)": "081812fc",
    "getAsset(uint256)": "eac8f5b8",
    "getDepositedAmount(uint256)": "a80fc071",
    "getEndTime(uint256)": "9067b677",
    "getRecipient(uint256)": "6d0cee75",
    "getRefundedAmount(uint256)": "d4dbd20b",
    "getSender(uint256)": "b971302a",
    "getStartTime(uint256)": "bc2be1be",
    "getWithdrawnAmount(uint256)": "d511609f",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isCancelable(uint256)": "4857501f",
    "isCold(uint256)": "8f69b993",
    "isDepleted(uint256)": "425d30dd",
    "isStream(uint256)": "b8a3be66",
    "isTransferable(uint256)": "b2564569",
    "isWarm(uint256)": "1c1cdd4c",
    "name()": "06fdde03",
    "nextStreamId()": "1e99d569",
    "ownerOf(uint256)": "6352211e",
    "protocolRevenues(address)": "39a73c03",
    "refundableAmountOf(uint256)": "1400ecec",
    "renounce(uint256)": "7de6b1db",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setComptroller(address)": "8bad38dd",
    "setNFTDescriptor(address)": "7cad6cd1",
    "statusOf(uint256)": "ad35efd4",
    "streamedAmountOf(uint256)": "4869e12d",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferAdmin(address)": "75829def",
    "transferFrom(address,address,uint256)": "23b872dd",
    "wasCanceled(uint256)": "f590c176",
    "withdraw(uint256,address,uint128)": "fdd46d60",
    "withdrawMax(uint256,address)": "ea5ead19",
    "withdrawMaxAndTransfer(uint256,address)": "c156a11d",
    "withdrawMultiple(uint256[],address,uint128[])": "a2ffb897",
    "withdrawableAmountOf(uint256)": "d975dfed"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"senderAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"recipientAmount\",\"type\":\"uint128\"}],\"name\":\"CancelLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolRevenues\",\"type\":\"uint128\"}],\"name\":\"ClaimProtocolRevenues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RenounceLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"SetComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"oldNFTDescriptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"SetNFTDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawFromLockupStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"UD60x18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"claimProtocolRevenues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRefundedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isDepleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isWarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"protocolRevenues\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"revenues\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Lockup.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"streamedAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"streamedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"wasCanceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"withdrawMaxAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"withdrawableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"CancelLockupStream(uint256,address,address,address,uint128,uint128)\":{\"params\":{\"asset\":\"The contract address of the ERC-20 asset used for streaming.\",\"recipient\":\"The address of the stream's recipient.\",\"recipientAmount\":\"The amount of assets left for the stream's recipient to withdraw, denoted in units of the asset's decimals.\",\"sender\":\"The address of the stream's sender.\",\"senderAmount\":\"The amount of assets refunded to the stream's sender, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\"}},\"ClaimProtocolRevenues(address,address,uint128)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"asset\":\"The contract address of the ERC-20 asset the protocol revenues have been claimed for.\",\"protocolRevenues\":\"The amount of protocol revenues claimed, denoted in units of the asset's decimals.\"}},\"RenounceLockupStream(uint256)\":{\"params\":{\"streamId\":\"The id of the stream.\"}},\"SetComptroller(address,address,address)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"newComptroller\":\"The address of the new comptroller contract.\",\"oldComptroller\":\"The address of the old comptroller contract.\"}},\"SetNFTDescriptor(address,address,address)\":{\"params\":{\"admin\":\"The address of the current contract admin.\",\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\",\"oldNFTDescriptor\":\"The address of the old NFT descriptor contract.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TransferAdmin(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new admin.\",\"oldAdmin\":\"The address of the old admin.\"}},\"WithdrawFromLockupStream(uint256,address,address,uint128)\":{\"params\":{\"amount\":\"The amount of assets withdrawn, denoted in units of the asset's decimals.\",\"asset\":\"The contract address of the ERC-20 asset used for streaming.\",\"streamId\":\"The id of the stream.\",\"to\":\"The address that has received the withdrawn assets.\"}}},\"kind\":\"dev\",\"methods\":{\"MAX_FEE()\":{\"details\":\"This value is hard coded as a constant.\"},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.\",\"params\":{\"streamId\":\"The id of the stream NFT to burn.\"}},\"cancel(uint256)\":{\"details\":\"Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on the recipient, if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be the stream's sender.\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"cancelMultiple(uint256[])\":{\"details\":\"Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.\",\"params\":{\"streamIds\":\"The ids of the streams to cancel.\"}},\"claimProtocolRevenues(address)\":{\"details\":\"Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"asset\":\"The contract address of the ERC-20 asset for which to claim protocol revenues.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getAsset(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getDepositedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getEndTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRecipient(uint256)\":{\"details\":\"Reverts if the NFT has been burned.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRefundedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getSender(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getStartTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getWithdrawnAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isCancelable(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isCold(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isDepleted(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isStream(uint256)\":{\"details\":\"Does not revert if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isTransferable(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isWarm(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"protocolRevenues(address)\":{\"params\":{\"asset\":\"The contract address of the ERC-20 asset to query.\"}},\"refundableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"renounce(uint256)\":{\"details\":\"Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.\",\"params\":{\"streamId\":\"The id of the stream to renounce.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setComptroller(address)\":{\"details\":\"Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newComptroller\":\"The address of the new comptroller contract.\"}},\"setNFTDescriptor(address)\":{\"details\":\"Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\"}},\"statusOf(uint256)\":{\"params\":{\"streamId\":\"The stream id for the query.\"}},\"streamedAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferAdmin(address)\":{\"details\":\"Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newAdmin\":\"The address of the new admin.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"wasCanceled(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"withdraw(uint256,address,uint128)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.\",\"params\":{\"amount\":\"The amount to withdraw, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMax(uint256,address)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.\",\"params\":{\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMaxAndTransfer(uint256,address)\":{\"details\":\"Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.\",\"params\":{\"newRecipient\":\"The address of the new owner of the stream NFT.\",\"streamId\":\"The id of the stream NFT to transfer.\"}},\"withdrawMultiple(uint256[],address,uint128[])\":{\"details\":\"Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.\",\"params\":{\"amounts\":\"The amounts to withdraw, denoted in units of the asset's decimals.\",\"streamIds\":\"The ids of the streams to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}}},\"title\":\"ISablierV2Lockup\",\"version\":1},\"userdoc\":{\"events\":{\"CancelLockupStream(uint256,address,address,address,uint128,uint128)\":{\"notice\":\"Emitted when a stream is canceled.\"},\"ClaimProtocolRevenues(address,address,uint128)\":{\"notice\":\"Emitted when the admin claims all protocol revenues accrued for a particular ERC-20 asset.\"},\"RenounceLockupStream(uint256)\":{\"notice\":\"Emitted when a sender gives up the right to cancel a stream.\"},\"SetComptroller(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new comptroller contract.\"},\"SetNFTDescriptor(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new NFT descriptor contract.\"},\"TransferAdmin(address,address)\":{\"notice\":\"Emitted when the admin is transferred.\"},\"WithdrawFromLockupStream(uint256,address,address,uint128)\":{\"notice\":\"Emitted when assets are withdrawn from a stream.\"}},\"kind\":\"user\",\"methods\":{\"MAX_FEE()\":{\"notice\":\"Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%.\"},\"admin()\":{\"notice\":\"The address of the admin account or contract.\"},\"burn(uint256)\":{\"notice\":\"Burns the NFT associated with the stream.\"},\"cancel(uint256)\":{\"notice\":\"Cancels the stream and refunds any remaining assets to the sender.\"},\"cancelMultiple(uint256[])\":{\"notice\":\"Cancels multiple streams and refunds any remaining assets to the sender.\"},\"claimProtocolRevenues(address)\":{\"notice\":\"Claims all accumulated protocol revenues for the provided ERC-20 asset.\"},\"comptroller()\":{\"notice\":\"Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration.\"},\"getAsset(uint256)\":{\"notice\":\"Retrieves the address of the ERC-20 asset used for streaming.\"},\"getDepositedAmount(uint256)\":{\"notice\":\"Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\"},\"getEndTime(uint256)\":{\"notice\":\"Retrieves the stream's end time, which is a Unix timestamp.\"},\"getRecipient(uint256)\":{\"notice\":\"Retrieves the stream's recipient.\"},\"getRefundedAmount(uint256)\":{\"notice\":\"Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled.\"},\"getSender(uint256)\":{\"notice\":\"Retrieves the stream's sender.\"},\"getStartTime(uint256)\":{\"notice\":\"Retrieves the stream's start time, which is a Unix timestamp.\"},\"getWithdrawnAmount(uint256)\":{\"notice\":\"Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\"},\"isCancelable(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`.\"},\"isCold(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\"},\"isDepleted(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is depleted.\"},\"isStream(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream exists.\"},\"isTransferable(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream NFT can be transferred.\"},\"isWarm(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\"},\"nextStreamId()\":{\"notice\":\"Counter for stream ids, used in the create functions.\"},\"protocolRevenues(address)\":{\"notice\":\"Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals.\"},\"refundableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals.\"},\"renounce(uint256)\":{\"notice\":\"Removes the right of the stream's sender to cancel the stream.\"},\"setComptroller(address)\":{\"notice\":\"Assigns a new comptroller contract responsible for the protocol configuration.\"},\"setNFTDescriptor(address)\":{\"notice\":\"Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\"},\"statusOf(uint256)\":{\"notice\":\"Retrieves the stream's status.\"},\"streamedAmountOf(uint256)\":{\"notice\":\"Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\"},\"transferAdmin(address)\":{\"notice\":\"Transfers the contract admin to a new address.\"},\"wasCanceled(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream was canceled.\"},\"withdraw(uint256,address,uint128)\":{\"notice\":\"Withdraws the provided amount of assets from the stream to the `to` address.\"},\"withdrawMax(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\"},\"withdrawMaxAndTransfer(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`.\"},\"withdrawMultiple(uint256[],address,uint128[])\":{\"notice\":\"Withdraws assets from streams to the provided address `to`.\"},\"withdrawableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals.\"}},\"notice\":\"Common logic between all Sablier V2 Lockup streaming contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISablierV2Lockup.sol\":\"ISablierV2Lockup\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/math/=node_modules/@prb/math/\",\":@prb/test/=node_modules/@prb/test/\",\":forge-std/=node_modules/forge-std/\",\":solady/=node_modules/solady/\",\":solarray/=node_modules/solarray/\"],\"viaIR\":true},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/@prb/math/src/Common.sol\":{\"keccak256\":\"0xaa374e2c26cc93e8c22a6953804ee05f811597ef5fa82f76824378b22944778b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://279c732e161d623cf4d8a9519ca4c42c0c2db99842d0eb2a20c10fde3fa722c9\",\"dweb:/ipfs/QmVViuUXbinQGqtG5M21SgVzKihiCbFUChd4tDhtvwRmxH\"]},\"node_modules/@prb/math/src/UD2x18.sol\":{\"keccak256\":\"0xfb624e24cd8bb790fa08e7827819de85504a86e20e961fa4ad126c65b6d90641\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd795b8df250e7eedc68e2dba1afbb60357ce8f22f21bed212b5a9046d2057d2\",\"dweb:/ipfs/QmUHtrSr8Gb6bvSe2rCWPA5YrJq72UiJARYr1gZqFVRsYH\"]},\"node_modules/@prb/math/src/UD60x18.sol\":{\"keccak256\":\"0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a750edde2955f160806a51083a12185fb04e20efca0e3a7ebd127dc1acc049a9\",\"dweb:/ipfs/QmeAre3mThopoQPB9mSXZq6jck59QZ7JbDFR83urd2SLvp\"]},\"node_modules/@prb/math/src/sd1x18/Casting.sol\":{\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3f65f257f9f516f2b40ca30b1c999819777111bd59a92376df6c5823453165a\",\"dweb:/ipfs/QmVQRKMS6ibv6x9qWXLJp2KZw9qs6Yz1sYZQWoSBQM8Pkz\"]},\"node_modules/@prb/math/src/sd1x18/Constants.sol\":{\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b9fccf58b2b69179a311f996f772d9bf255fd1d0de9ba69ab89b45ef81008770\",\"dweb:/ipfs/QmTYE7xmFqUzQ2o8SmCpMu2GxkBJLjTtSWngoe7JXzsv2D\"]},\"node_modules/@prb/math/src/sd1x18/Errors.sol\":{\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58873bcebf7398f63c6d3f234073fb6739fe4fae87428010cd0bc1aa68f53499\",\"dweb:/ipfs/QmZSZ9z4ZQUGRc1TRiL2F9AL7ysnGRXwRtocMa2zhxHFDp\"]},\"node_modules/@prb/math/src/sd1x18/ValueType.sol\":{\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31559dfc012ebe40fcdb38c45e7edfa16406f11c6ea219e8676749f20dbbb5dd\",\"dweb:/ipfs/QmXeYzF9hYQphVExJRp41Vkebrs51k7xgr3jXfKgdD87XC\"]},\"node_modules/@prb/math/src/sd59x18/Casting.sol\":{\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08a49ba7ebf592a89e1a81e5987351e7810e371f4c3d2356d9b5a9b58462c809\",\"dweb:/ipfs/QmcvyHaUzd74eYjcZWQgUDFJfYrU8kFohiB1H5cs8HgUDp\"]},\"node_modules/@prb/math/src/sd59x18/Constants.sol\":{\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e9a6980e97a68f9148c350439bc0b3ca4126a4428752b151744097da3f650c8\",\"dweb:/ipfs/QmVRJqG378u46dnvjgYkcLjnvHW8yNv5ijLoUWPMGQscuC\"]},\"node_modules/@prb/math/src/sd59x18/Errors.sol\":{\"keccak256\":\"0xa6d00fe5efa215ac0df25c896e3da99a12fb61e799644b2ec32da947313d3db4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cbfcf2d9681a2af1e076439791e2853b466066d867bfcbbf6b46b4a4476f712f\",\"dweb:/ipfs/QmWGznYLYdvsjMSyauT2DoipgGLVGW9KASXEknTgR5eRMv\"]},\"node_modules/@prb/math/src/sd59x18/Helpers.sol\":{\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c78ca900edafa9338d4e3649a55ab0c84f76468d8a22fb945ba6d01e70f8fed\",\"dweb:/ipfs/QmeP4hQYfNxcATd1FsasdD4ebyu2vrC9K1N68swxUJzzZD\"]},\"node_modules/@prb/math/src/sd59x18/Math.sol\":{\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51795a2077ea6f109656048530481bb10c7f2b29e868f9a02d7b134d1b30c787\",\"dweb:/ipfs/Qmb9wBJ5vPtKNbiz9bbWz8Ufs6qLJWKanyg1zmRmSwUVze\"]},\"node_modules/@prb/math/src/sd59x18/ValueType.sol\":{\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://abacb7cba4bd732c961cfe7d66c5eec924c7a9ffe0bf07fafc95b65a887071f6\",\"dweb:/ipfs/QmSBefftoSJDMdmp5CFAVvJjPHJXHhd11x1FzkcHQxLjoT\"]},\"node_modules/@prb/math/src/ud2x18/Casting.sol\":{\"keccak256\":\"0x9b1a35d432ef951a415fae8098b3c609a99b630a3d5464b3c8e1efa8893eea07\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://977ab8a458a6aeaf7cfd125c06e1e4c50fa1147f0b72638d1ae1fb4f6ad37ddd\",\"dweb:/ipfs/QmeVVDpmYm1Tc8kpscF1Z2rtYvkpb1NeGBwRoYgLBuwXeA\"]},\"node_modules/@prb/math/src/ud2x18/Constants.sol\":{\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0d3d5cb4711d83e0fe654b8338b6685b6e9d9f234c645813533129ae48fa14b\",\"dweb:/ipfs/QmZW47VmyizEwAxuv6tdeJmrMM58KvsiaRjidcBgqKg4CP\"]},\"node_modules/@prb/math/src/ud2x18/Errors.sol\":{\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://975f9beb25a1ebff9b29dd5555e1f4f14a4fbf178d15ebd3add5ed5f5985fdec\",\"dweb:/ipfs/QmbvTvdtSrZi7J4sJuv6zUsymT5UctJnx4DkGezXW25r59\"]},\"node_modules/@prb/math/src/ud2x18/ValueType.sol\":{\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9657724f5032559c953cba61db0fbca71f6b50f51edb53a08f840cb74a36c95\",\"dweb:/ipfs/QmX2KF8v7ng13NaavyogM3SGR4jCMLUuqKkxFhtxvc7D7m\"]},\"node_modules/@prb/math/src/ud60x18/Casting.sol\":{\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0819da49f6a86a1fc2ece8e8a4292f8d102dc1043a1d0a545c26d020d1f36fe\",\"dweb:/ipfs/QmdzLoo99EBJv2GGiZZAAY8Bfr4ivFykzeSbpF48aJxFZ9\"]},\"node_modules/@prb/math/src/ud60x18/Constants.sol\":{\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e3a6673a156f635db94dc176baaa7274db8f9bec4461cd1152596253550ee3b\",\"dweb:/ipfs/Qmc9zT4kNSbMYaXcnbxNVqmb3P3m46ieaQxkwxqLwsvRA5\"]},\"node_modules/@prb/math/src/ud60x18/Conversions.sol\":{\"keccak256\":\"0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://655c9fe2434ca039b67277d753a60d39f2938260c716a36d24b591acf8c4fb75\",\"dweb:/ipfs/QmbygBAjCoFe9oUp9QkJ45jqctThk7VSmiSVLHV4Z3WHVe\"]},\"node_modules/@prb/math/src/ud60x18/Errors.sol\":{\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fb7e1103309b4f99e95bb638850c0321272d57bd3e6b0a6331d699ff103cbaf\",\"dweb:/ipfs/QmfLFHjVJv4ibEvMmh46qC5nCbeCYSfXgCTDWQqfW3jnyB\"]},\"node_modules/@prb/math/src/ud60x18/Helpers.sol\":{\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76105fa22bb1b5f1fa99abf9c4fbc9577a02c7bc204f271754c407f0d75489f5\",\"dweb:/ipfs/QmVNGZSTniDuZus5DdbFubqJXCLtTaZit7YPm4ntjr5Lgr\"]},\"node_modules/@prb/math/src/ud60x18/Math.sol\":{\"keccak256\":\"0x462144667aac3f96d5f8dba7aa68fe4c5a3f61e1d7bbbc81bee21168817f9c09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9bb7f11754e2202ed03351e52ef72f7ec85120b4a3ddec2f312b7bf5b08d4d7\",\"dweb:/ipfs/Qmd1tg9PEfdHD1GNmTiB8wUM7VrS4jfQFto3KKn1vfYGjw\"]},\"node_modules/@prb/math/src/ud60x18/ValueType.sol\":{\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7df6700f747dd01b2520a900a8d6b5a4d239b8063c31384f40921afe22295c29\",\"dweb:/ipfs/QmSPSPQJKNSzGJu2ri5EfWjcLfA2xDHfUehyBp4FpUu2qZ\"]},\"src/interfaces/IAdminable.sol\":{\"keccak256\":\"0xecc2d5f08b737e1acd5f641de59b262831c520adf8cd7290d02efe39e0ae443e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://13c159aa3a2db6e2be6f2483c7e001dc84360220bdaf9a38247c213529a2d885\",\"dweb:/ipfs/QmZTfUR2FTfnC3Rohe8ntEvDwyW3K3RfruHZ98Phi48BGH\"]},\"src/interfaces/ISablierV2Base.sol\":{\"keccak256\":\"0xb12e58a05389c958f79ebe1667e167c1e0bb681a18ae534f5e454abbd66f6821\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1c57fabd0290e38c73c88cbf09ffe1675f3d9367fbba72ad647fbe729f5fd9f7\",\"dweb:/ipfs/QmZ2ybkhNR8CzqMi5fwSUZodZ9otYBGR4pVDp7fk78KpAM\"]},\"src/interfaces/ISablierV2Comptroller.sol\":{\"keccak256\":\"0xfe089975be90f0efeeafc9ac9dfa5c301ca1f5c178177ac5589a8483a0aa84a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c6b87d383df9fab91a62629107ebd44122d16de55a01c3996cbb155a1373bde7\",\"dweb:/ipfs/QmTLfmcHJh8ZYbLai1oAkjBak9fpMnv3HDaGoMQd3wFcNF\"]},\"src/interfaces/ISablierV2Lockup.sol\":{\"keccak256\":\"0x61abd439ba9729781bb32bc6b267cbfdbdf66177e40ce449399054ffd57cdbea\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0d1755902afd381ce579aad5d3958b6ca3715c60b6a4371995fba5586a870a88\",\"dweb:/ipfs/QmZDu3fqPpLxk9TXZPxSKbC9ACAujLVApQeoQZ7ZJE5b5r\"]},\"src/interfaces/ISablierV2NFTDescriptor.sol\":{\"keccak256\":\"0x35172718298221f3aac87424252e4eaf7480ce901fe9a7b92d8fdd871ecdad3a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://39d0d2d17d3f6ec4313a6313e85af2fd8a861930a8563a2b8e9ba1da099c6d73\",\"dweb:/ipfs/QmQmKYkqnLJrfEyDT2YwiXyzhYG4SaHpu6gsaFePqp2hxV\"]},\"src/types/DataTypes.sol\":{\"keccak256\":\"0xe9f7db9149a892c339d0c72c26c322fe0f336061559bcd5fe761ed4add85b87f\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://862268b89b1e8cdfd019e4aecd6c136231f0569b045b7a2bef6166195c4c23d0\",\"dweb:/ipfs/QmWVKoyWpq1fFZ8c2AbzBYJxmcvTLnW3o3BVRaFT2FncpK\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.23+commit.f704f362" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            { "internalType": "address", "name": "owner", "type": "address", "indexed": true },
            { "internalType": "address", "name": "approved", "type": "address", "indexed": true },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256", "indexed": true }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "owner", "type": "address", "indexed": true },
            { "internalType": "address", "name": "operator", "type": "address", "indexed": true },
            { "internalType": "bool", "name": "approved", "type": "bool", "indexed": false }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "streamId", "type": "uint256", "indexed": false },
            { "internalType": "address", "name": "sender", "type": "address", "indexed": true },
            { "internalType": "address", "name": "recipient", "type": "address", "indexed": true },
            { "internalType": "contract IERC20", "name": "asset", "type": "address", "indexed": true },
            { "internalType": "uint128", "name": "senderAmount", "type": "uint128", "indexed": false },
            { "internalType": "uint128", "name": "recipientAmount", "type": "uint128", "indexed": false }
          ],
          "type": "event",
          "name": "CancelLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "admin", "type": "address", "indexed": true },
            { "internalType": "contract IERC20", "name": "asset", "type": "address", "indexed": true },
            { "internalType": "uint128", "name": "protocolRevenues", "type": "uint128", "indexed": false }
          ],
          "type": "event",
          "name": "ClaimProtocolRevenues",
          "anonymous": false
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256", "indexed": true }],
          "type": "event",
          "name": "RenounceLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "admin", "type": "address", "indexed": true },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "oldComptroller",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetComptroller",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "admin", "type": "address", "indexed": true },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "oldNFTDescriptor",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetNFTDescriptor",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address", "indexed": true },
            { "internalType": "address", "name": "to", "type": "address", "indexed": true },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256", "indexed": true }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "oldAdmin", "type": "address", "indexed": true },
            { "internalType": "address", "name": "newAdmin", "type": "address", "indexed": true }
          ],
          "type": "event",
          "name": "TransferAdmin",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "streamId", "type": "uint256", "indexed": true },
            { "internalType": "address", "name": "to", "type": "address", "indexed": true },
            { "internalType": "contract IERC20", "name": "asset", "type": "address", "indexed": true },
            { "internalType": "uint128", "name": "amount", "type": "uint128", "indexed": false }
          ],
          "type": "event",
          "name": "WithdrawFromLockupStream",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_FEE",
          "outputs": [{ "internalType": "UD60x18", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [{ "internalType": "address", "name": "", "type": "address" }]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [{ "internalType": "uint256", "name": "balance", "type": "uint256" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancel"
        },
        {
          "inputs": [{ "internalType": "uint256[]", "name": "streamIds", "type": "uint256[]" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelMultiple"
        },
        {
          "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimProtocolRevenues"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "comptroller",
          "outputs": [{ "internalType": "contract ISablierV2Comptroller", "name": "", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [{ "internalType": "address", "name": "operator", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getAsset",
          "outputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getDepositedAmount",
          "outputs": [{ "internalType": "uint128", "name": "depositedAmount", "type": "uint128" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getEndTime",
          "outputs": [{ "internalType": "uint40", "name": "endTime", "type": "uint40" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecipient",
          "outputs": [{ "internalType": "address", "name": "recipient", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getRefundedAmount",
          "outputs": [{ "internalType": "uint128", "name": "refundedAmount", "type": "uint128" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getSender",
          "outputs": [{ "internalType": "address", "name": "sender", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getStartTime",
          "outputs": [{ "internalType": "uint40", "name": "startTime", "type": "uint40" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawnAmount",
          "outputs": [{ "internalType": "uint128", "name": "withdrawnAmount", "type": "uint128" }]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "owner", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isCancelable",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isCold",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isDepleted",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isStream",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isTransferable",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isWarm",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [{ "internalType": "string", "name": "", "type": "string" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextStreamId",
          "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [{ "internalType": "address", "name": "owner", "type": "address" }]
        },
        {
          "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolRevenues",
          "outputs": [{ "internalType": "uint128", "name": "revenues", "type": "uint128" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "refundableAmountOf",
          "outputs": [{ "internalType": "uint128", "name": "refundableAmount", "type": "uint128" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounce"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
            { "internalType": "bytes", "name": "data", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "operator", "type": "address" },
            { "internalType": "bool", "name": "approved", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [{ "internalType": "contract ISablierV2Comptroller", "name": "newComptroller", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setComptroller"
        },
        {
          "inputs": [
            { "internalType": "contract ISablierV2NFTDescriptor", "name": "newNFTDescriptor", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setNFTDescriptor"
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "statusOf",
          "outputs": [{ "internalType": "enum Lockup.Status", "name": "status", "type": "uint8" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "streamedAmountOf",
          "outputs": [{ "internalType": "uint128", "name": "streamedAmount", "type": "uint128" }]
        },
        {
          "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [{ "internalType": "string", "name": "", "type": "string" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [{ "internalType": "string", "name": "", "type": "string" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "newAdmin", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdmin"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "wasCanceled",
          "outputs": [{ "internalType": "bool", "name": "result", "type": "bool" }]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "streamId", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint128", "name": "amount", "type": "uint128" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "streamId", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMax"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "streamId", "type": "uint256" },
            { "internalType": "address", "name": "newRecipient", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMaxAndTransfer"
        },
        {
          "inputs": [
            { "internalType": "uint256[]", "name": "streamIds", "type": "uint256[]" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint128[]", "name": "amounts", "type": "uint128[]" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMultiple"
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "streamId", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "withdrawableAmountOf",
          "outputs": [{ "internalType": "uint128", "name": "withdrawableAmount", "type": "uint128" }]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "MAX_FEE()": { "details": "This value is hard coded as a constant." },
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": { "details": "Returns the number of tokens in ``owner``'s account." },
          "burn(uint256)": {
            "details": "Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.",
            "params": { "streamId": "The id of the stream NFT to burn." }
          },
          "cancel(uint256)": {
            "details": "Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on the recipient, if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be the stream's sender.",
            "params": { "streamId": "The id of the stream to cancel." }
          },
          "cancelMultiple(uint256[])": {
            "details": "Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.",
            "params": { "streamIds": "The ids of the streams to cancel." }
          },
          "claimProtocolRevenues(address)": {
            "details": "Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.",
            "params": { "asset": "The contract address of the ERC-20 asset for which to claim protocol revenues." }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getAsset(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getDepositedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getEndTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getRecipient(uint256)": {
            "details": "Reverts if the NFT has been burned.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getRefundedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getSender(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getStartTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "getWithdrawnAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "isCancelable(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isCold(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isDepleted(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isStream(uint256)": {
            "details": "Does not revert if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isTransferable(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "isWarm(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "name()": { "details": "Returns the token collection name." },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "protocolRevenues(address)": { "params": { "asset": "The contract address of the ERC-20 asset to query." } },
          "refundableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "renounce(uint256)": {
            "details": "Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.",
            "params": { "streamId": "The id of the stream to renounce." }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "setComptroller(address)": {
            "details": "Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": { "newComptroller": "The address of the new comptroller contract." }
          },
          "setNFTDescriptor(address)": {
            "details": "Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": { "newNFTDescriptor": "The address of the new NFT descriptor contract." }
          },
          "statusOf(uint256)": { "params": { "streamId": "The stream id for the query." } },
          "streamedAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": { "details": "Returns the token collection symbol." },
          "tokenURI(uint256)": { "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token." },
          "transferAdmin(address)": {
            "details": "Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.",
            "params": { "newAdmin": "The address of the new admin." }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "wasCanceled(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          },
          "withdraw(uint256,address,uint128)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.",
            "params": {
              "amount": "The amount to withdraw, denoted in units of the asset's decimals.",
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMax(uint256,address)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.",
            "params": {
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "details": "Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.",
            "params": {
              "newRecipient": "The address of the new owner of the stream NFT.",
              "streamId": "The id of the stream NFT to transfer."
            }
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "details": "Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.",
            "params": {
              "amounts": "The amounts to withdraw, denoted in units of the asset's decimals.",
              "streamIds": "The ids of the streams to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": { "streamId": "The stream id for the query." }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_FEE()": {
            "notice": "Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%."
          },
          "admin()": { "notice": "The address of the admin account or contract." },
          "burn(uint256)": { "notice": "Burns the NFT associated with the stream." },
          "cancel(uint256)": { "notice": "Cancels the stream and refunds any remaining assets to the sender." },
          "cancelMultiple(uint256[])": {
            "notice": "Cancels multiple streams and refunds any remaining assets to the sender."
          },
          "claimProtocolRevenues(address)": {
            "notice": "Claims all accumulated protocol revenues for the provided ERC-20 asset."
          },
          "comptroller()": {
            "notice": "Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration."
          },
          "getAsset(uint256)": { "notice": "Retrieves the address of the ERC-20 asset used for streaming." },
          "getDepositedAmount(uint256)": {
            "notice": "Retrieves the amount deposited in the stream, denoted in units of the asset's decimals."
          },
          "getEndTime(uint256)": { "notice": "Retrieves the stream's end time, which is a Unix timestamp." },
          "getRecipient(uint256)": { "notice": "Retrieves the stream's recipient." },
          "getRefundedAmount(uint256)": {
            "notice": "Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled."
          },
          "getSender(uint256)": { "notice": "Retrieves the stream's sender." },
          "getStartTime(uint256)": { "notice": "Retrieves the stream's start time, which is a Unix timestamp." },
          "getWithdrawnAmount(uint256)": {
            "notice": "Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals."
          },
          "isCancelable(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`."
          },
          "isCold(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted."
          },
          "isDepleted(uint256)": { "notice": "Retrieves a flag indicating whether the stream is depleted." },
          "isStream(uint256)": { "notice": "Retrieves a flag indicating whether the stream exists." },
          "isTransferable(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream NFT can be transferred."
          },
          "isWarm(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming."
          },
          "nextStreamId()": { "notice": "Counter for stream ids, used in the create functions." },
          "protocolRevenues(address)": {
            "notice": "Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals."
          },
          "refundableAmountOf(uint256)": {
            "notice": "Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals."
          },
          "renounce(uint256)": { "notice": "Removes the right of the stream's sender to cancel the stream." },
          "setComptroller(address)": {
            "notice": "Assigns a new comptroller contract responsible for the protocol configuration."
          },
          "setNFTDescriptor(address)": {
            "notice": "Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs."
          },
          "statusOf(uint256)": { "notice": "Retrieves the stream's status." },
          "streamedAmountOf(uint256)": {
            "notice": "Calculates the amount streamed to the recipient, denoted in units of the asset's decimals."
          },
          "transferAdmin(address)": { "notice": "Transfers the contract admin to a new address." },
          "wasCanceled(uint256)": { "notice": "Retrieves a flag indicating whether the stream was canceled." },
          "withdraw(uint256,address,uint128)": {
            "notice": "Withdraws the provided amount of assets from the stream to the `to` address."
          },
          "withdrawMax(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the provided address `to`."
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`."
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "notice": "Withdraws assets from streams to the provided address `to`."
          },
          "withdrawableAmountOf(uint256)": {
            "notice": "Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        "@prb/math/=node_modules/@prb/math/",
        "@prb/test/=node_modules/@prb/test/",
        "forge-std/=node_modules/forge-std/",
        "solady/=node_modules/solady/",
        "solarray/=node_modules/solarray/"
      ],
      "optimizer": { "enabled": true, "runs": 1000 },
      "metadata": { "bytecodeHash": "none" },
      "compilationTarget": { "src/interfaces/ISablierV2Lockup.sol": "ISablierV2Lockup" },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/Common.sol": {
        "keccak256": "0xaa374e2c26cc93e8c22a6953804ee05f811597ef5fa82f76824378b22944778b",
        "urls": [
          "bzz-raw://279c732e161d623cf4d8a9519ca4c42c0c2db99842d0eb2a20c10fde3fa722c9",
          "dweb:/ipfs/QmVViuUXbinQGqtG5M21SgVzKihiCbFUChd4tDhtvwRmxH"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/UD2x18.sol": {
        "keccak256": "0xfb624e24cd8bb790fa08e7827819de85504a86e20e961fa4ad126c65b6d90641",
        "urls": [
          "bzz-raw://dd795b8df250e7eedc68e2dba1afbb60357ce8f22f21bed212b5a9046d2057d2",
          "dweb:/ipfs/QmUHtrSr8Gb6bvSe2rCWPA5YrJq72UiJARYr1gZqFVRsYH"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/UD60x18.sol": {
        "keccak256": "0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48",
        "urls": [
          "bzz-raw://a750edde2955f160806a51083a12185fb04e20efca0e3a7ebd127dc1acc049a9",
          "dweb:/ipfs/QmeAre3mThopoQPB9mSXZq6jck59QZ7JbDFR83urd2SLvp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Casting.sol": {
        "keccak256": "0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670",
        "urls": [
          "bzz-raw://d3f65f257f9f516f2b40ca30b1c999819777111bd59a92376df6c5823453165a",
          "dweb:/ipfs/QmVQRKMS6ibv6x9qWXLJp2KZw9qs6Yz1sYZQWoSBQM8Pkz"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Constants.sol": {
        "keccak256": "0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f",
        "urls": [
          "bzz-raw://b9fccf58b2b69179a311f996f772d9bf255fd1d0de9ba69ab89b45ef81008770",
          "dweb:/ipfs/QmTYE7xmFqUzQ2o8SmCpMu2GxkBJLjTtSWngoe7JXzsv2D"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Errors.sol": {
        "keccak256": "0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee",
        "urls": [
          "bzz-raw://58873bcebf7398f63c6d3f234073fb6739fe4fae87428010cd0bc1aa68f53499",
          "dweb:/ipfs/QmZSZ9z4ZQUGRc1TRiL2F9AL7ysnGRXwRtocMa2zhxHFDp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/ValueType.sol": {
        "keccak256": "0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7",
        "urls": [
          "bzz-raw://31559dfc012ebe40fcdb38c45e7edfa16406f11c6ea219e8676749f20dbbb5dd",
          "dweb:/ipfs/QmXeYzF9hYQphVExJRp41Vkebrs51k7xgr3jXfKgdD87XC"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Casting.sol": {
        "keccak256": "0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99",
        "urls": [
          "bzz-raw://08a49ba7ebf592a89e1a81e5987351e7810e371f4c3d2356d9b5a9b58462c809",
          "dweb:/ipfs/QmcvyHaUzd74eYjcZWQgUDFJfYrU8kFohiB1H5cs8HgUDp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Constants.sol": {
        "keccak256": "0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a",
        "urls": [
          "bzz-raw://3e9a6980e97a68f9148c350439bc0b3ca4126a4428752b151744097da3f650c8",
          "dweb:/ipfs/QmVRJqG378u46dnvjgYkcLjnvHW8yNv5ijLoUWPMGQscuC"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Errors.sol": {
        "keccak256": "0xa6d00fe5efa215ac0df25c896e3da99a12fb61e799644b2ec32da947313d3db4",
        "urls": [
          "bzz-raw://cbfcf2d9681a2af1e076439791e2853b466066d867bfcbbf6b46b4a4476f712f",
          "dweb:/ipfs/QmWGznYLYdvsjMSyauT2DoipgGLVGW9KASXEknTgR5eRMv"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Helpers.sol": {
        "keccak256": "0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716",
        "urls": [
          "bzz-raw://4c78ca900edafa9338d4e3649a55ab0c84f76468d8a22fb945ba6d01e70f8fed",
          "dweb:/ipfs/QmeP4hQYfNxcATd1FsasdD4ebyu2vrC9K1N68swxUJzzZD"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Math.sol": {
        "keccak256": "0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868",
        "urls": [
          "bzz-raw://51795a2077ea6f109656048530481bb10c7f2b29e868f9a02d7b134d1b30c787",
          "dweb:/ipfs/Qmb9wBJ5vPtKNbiz9bbWz8Ufs6qLJWKanyg1zmRmSwUVze"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/ValueType.sol": {
        "keccak256": "0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7",
        "urls": [
          "bzz-raw://abacb7cba4bd732c961cfe7d66c5eec924c7a9ffe0bf07fafc95b65a887071f6",
          "dweb:/ipfs/QmSBefftoSJDMdmp5CFAVvJjPHJXHhd11x1FzkcHQxLjoT"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Casting.sol": {
        "keccak256": "0x9b1a35d432ef951a415fae8098b3c609a99b630a3d5464b3c8e1efa8893eea07",
        "urls": [
          "bzz-raw://977ab8a458a6aeaf7cfd125c06e1e4c50fa1147f0b72638d1ae1fb4f6ad37ddd",
          "dweb:/ipfs/QmeVVDpmYm1Tc8kpscF1Z2rtYvkpb1NeGBwRoYgLBuwXeA"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Constants.sol": {
        "keccak256": "0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5",
        "urls": [
          "bzz-raw://f0d3d5cb4711d83e0fe654b8338b6685b6e9d9f234c645813533129ae48fa14b",
          "dweb:/ipfs/QmZW47VmyizEwAxuv6tdeJmrMM58KvsiaRjidcBgqKg4CP"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Errors.sol": {
        "keccak256": "0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33",
        "urls": [
          "bzz-raw://975f9beb25a1ebff9b29dd5555e1f4f14a4fbf178d15ebd3add5ed5f5985fdec",
          "dweb:/ipfs/QmbvTvdtSrZi7J4sJuv6zUsymT5UctJnx4DkGezXW25r59"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/ValueType.sol": {
        "keccak256": "0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1",
        "urls": [
          "bzz-raw://e9657724f5032559c953cba61db0fbca71f6b50f51edb53a08f840cb74a36c95",
          "dweb:/ipfs/QmX2KF8v7ng13NaavyogM3SGR4jCMLUuqKkxFhtxvc7D7m"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Casting.sol": {
        "keccak256": "0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85",
        "urls": [
          "bzz-raw://f0819da49f6a86a1fc2ece8e8a4292f8d102dc1043a1d0a545c26d020d1f36fe",
          "dweb:/ipfs/QmdzLoo99EBJv2GGiZZAAY8Bfr4ivFykzeSbpF48aJxFZ9"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Constants.sol": {
        "keccak256": "0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90",
        "urls": [
          "bzz-raw://7e3a6673a156f635db94dc176baaa7274db8f9bec4461cd1152596253550ee3b",
          "dweb:/ipfs/Qmc9zT4kNSbMYaXcnbxNVqmb3P3m46ieaQxkwxqLwsvRA5"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Conversions.sol": {
        "keccak256": "0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b",
        "urls": [
          "bzz-raw://655c9fe2434ca039b67277d753a60d39f2938260c716a36d24b591acf8c4fb75",
          "dweb:/ipfs/QmbygBAjCoFe9oUp9QkJ45jqctThk7VSmiSVLHV4Z3WHVe"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Errors.sol": {
        "keccak256": "0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3",
        "urls": [
          "bzz-raw://8fb7e1103309b4f99e95bb638850c0321272d57bd3e6b0a6331d699ff103cbaf",
          "dweb:/ipfs/QmfLFHjVJv4ibEvMmh46qC5nCbeCYSfXgCTDWQqfW3jnyB"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Helpers.sol": {
        "keccak256": "0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268",
        "urls": [
          "bzz-raw://76105fa22bb1b5f1fa99abf9c4fbc9577a02c7bc204f271754c407f0d75489f5",
          "dweb:/ipfs/QmVNGZSTniDuZus5DdbFubqJXCLtTaZit7YPm4ntjr5Lgr"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Math.sol": {
        "keccak256": "0x462144667aac3f96d5f8dba7aa68fe4c5a3f61e1d7bbbc81bee21168817f9c09",
        "urls": [
          "bzz-raw://d9bb7f11754e2202ed03351e52ef72f7ec85120b4a3ddec2f312b7bf5b08d4d7",
          "dweb:/ipfs/Qmd1tg9PEfdHD1GNmTiB8wUM7VrS4jfQFto3KKn1vfYGjw"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/ValueType.sol": {
        "keccak256": "0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31",
        "urls": [
          "bzz-raw://7df6700f747dd01b2520a900a8d6b5a4d239b8063c31384f40921afe22295c29",
          "dweb:/ipfs/QmSPSPQJKNSzGJu2ri5EfWjcLfA2xDHfUehyBp4FpUu2qZ"
        ],
        "license": "MIT"
      },
      "src/interfaces/IAdminable.sol": {
        "keccak256": "0xecc2d5f08b737e1acd5f641de59b262831c520adf8cd7290d02efe39e0ae443e",
        "urls": [
          "bzz-raw://13c159aa3a2db6e2be6f2483c7e001dc84360220bdaf9a38247c213529a2d885",
          "dweb:/ipfs/QmZTfUR2FTfnC3Rohe8ntEvDwyW3K3RfruHZ98Phi48BGH"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierV2Base.sol": {
        "keccak256": "0xb12e58a05389c958f79ebe1667e167c1e0bb681a18ae534f5e454abbd66f6821",
        "urls": [
          "bzz-raw://1c57fabd0290e38c73c88cbf09ffe1675f3d9367fbba72ad647fbe729f5fd9f7",
          "dweb:/ipfs/QmZ2ybkhNR8CzqMi5fwSUZodZ9otYBGR4pVDp7fk78KpAM"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierV2Comptroller.sol": {
        "keccak256": "0xfe089975be90f0efeeafc9ac9dfa5c301ca1f5c178177ac5589a8483a0aa84a3",
        "urls": [
          "bzz-raw://c6b87d383df9fab91a62629107ebd44122d16de55a01c3996cbb155a1373bde7",
          "dweb:/ipfs/QmTLfmcHJh8ZYbLai1oAkjBak9fpMnv3HDaGoMQd3wFcNF"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierV2Lockup.sol": {
        "keccak256": "0x61abd439ba9729781bb32bc6b267cbfdbdf66177e40ce449399054ffd57cdbea",
        "urls": [
          "bzz-raw://0d1755902afd381ce579aad5d3958b6ca3715c60b6a4371995fba5586a870a88",
          "dweb:/ipfs/QmZDu3fqPpLxk9TXZPxSKbC9ACAujLVApQeoQZ7ZJE5b5r"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierV2NFTDescriptor.sol": {
        "keccak256": "0x35172718298221f3aac87424252e4eaf7480ce901fe9a7b92d8fdd871ecdad3a",
        "urls": [
          "bzz-raw://39d0d2d17d3f6ec4313a6313e85af2fd8a861930a8563a2b8e9ba1da099c6d73",
          "dweb:/ipfs/QmQmKYkqnLJrfEyDT2YwiXyzhYG4SaHpu6gsaFePqp2hxV"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/types/DataTypes.sol": {
        "keccak256": "0xe9f7db9149a892c339d0c72c26c322fe0f336061559bcd5fe761ed4add85b87f",
        "urls": [
          "bzz-raw://862268b89b1e8cdfd019e4aecd6c136231f0569b045b7a2bef6166195c4c23d0",
          "dweb:/ipfs/QmWVKoyWpq1fFZ8c2AbzBYJxmcvTLnW3o3BVRaFT2FncpK"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/ISablierV2Lockup.sol",
    "id": 49713,
    "exportedSymbols": {
      "IERC20": [105],
      "IERC721Metadata": [1630],
      "ISablierV2Base": [49323],
      "ISablierV2Lockup": [49712],
      "ISablierV2NFTDescriptor": [49923],
      "Lockup": [51603]
    },
    "nodeType": "SourceUnit",
    "src": "45:15124:87",
    "nodes": [
      {
        "id": 49422,
        "nodeType": "PragmaDirective",
        "src": "45:25:87",
        "nodes": [],
        "literals": ["solidity", ">=", "0.8", ".19"]
      },
      {
        "id": 49424,
        "nodeType": "ImportDirective",
        "src": "72:72:87",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49713,
        "sourceUnit": 106,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49423,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 105,
              "src": "81:6:87",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49426,
        "nodeType": "ImportDirective",
        "src": "145:102:87",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49713,
        "sourceUnit": 1631,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49425,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1630,
              "src": "154:15:87",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49428,
        "nodeType": "ImportDirective",
        "src": "249:48:87",
        "nodes": [],
        "absolutePath": "src/types/DataTypes.sol",
        "file": "../types/DataTypes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49713,
        "sourceUnit": 51788,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49427,
              "name": "Lockup",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 51603,
              "src": "258:6:87",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49430,
        "nodeType": "ImportDirective",
        "src": "298:54:87",
        "nodes": [],
        "absolutePath": "src/interfaces/ISablierV2Base.sol",
        "file": "./ISablierV2Base.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49713,
        "sourceUnit": 49324,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49429,
              "name": "ISablierV2Base",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 49323,
              "src": "307:14:87",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49432,
        "nodeType": "ImportDirective",
        "src": "353:72:87",
        "nodes": [],
        "absolutePath": "src/interfaces/ISablierV2NFTDescriptor.sol",
        "file": "./ISablierV2NFTDescriptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49713,
        "sourceUnit": 49924,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49431,
              "name": "ISablierV2NFTDescriptor",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 49923,
              "src": "362:23:87",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49712,
        "nodeType": "ContractDefinition",
        "src": "531:14637:87",
        "nodes": [
          {
            "id": 49453,
            "nodeType": "EventDefinition",
            "src": "1447:217:87",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49438,
              "nodeType": "StructuredDocumentation",
              "src": "867:575:87",
              "text": "@notice Emitted when a stream is canceled.\n @param streamId The id of the stream.\n @param sender The address of the stream's sender.\n @param recipient The address of the stream's recipient.\n @param asset The contract address of the ERC-20 asset used for streaming.\n @param senderAmount The amount of assets refunded to the stream's sender, denoted in units of the asset's\n decimals.\n @param recipientAmount The amount of assets left for the stream's recipient to withdraw, denoted in units of the\n asset's decimals."
            },
            "eventSelector": "5edb27d6c1a327513b90a792050debf074b7194444885e3144d4decc5caaaa50",
            "name": "CancelLockupStream",
            "nameLocation": "1453:18:87",
            "parameters": {
              "id": 49452,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49440,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1489:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1481:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49439,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1481:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49442,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1523:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1507:22:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1507:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49444,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1555:9:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1539:25:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49443,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1539:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49447,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "1589:5:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1574:20:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" },
                  "typeName": {
                    "id": 49446,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49445,
                      "name": "IERC20",
                      "nameLocations": ["1574:6:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 105,
                      "src": "1574:6:87"
                    },
                    "referencedDeclaration": 105,
                    "src": "1574:6:87",
                    "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49449,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "senderAmount",
                  "nameLocation": "1612:12:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1604:20:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49448,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1604:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49451,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "recipientAmount",
                  "nameLocation": "1642:15:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49453,
                  "src": "1634:23:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49450,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1634:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1471:192:87"
            }
          },
          {
            "id": 49458,
            "nodeType": "EventDefinition",
            "src": "1793:53:87",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49454,
              "nodeType": "StructuredDocumentation",
              "src": "1670:118:87",
              "text": "@notice Emitted when a sender gives up the right to cancel a stream.\n @param streamId The id of the stream."
            },
            "eventSelector": "0eb069207093cd3e51cd1370d2d369770057fbe29947e577e5fb428c6c6fc78f",
            "name": "RenounceLockupStream",
            "nameLocation": "1799:20:87",
            "parameters": {
              "id": 49457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49456,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1836:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49458,
                  "src": "1820:24:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49455,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1820:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1819:26:87"
            }
          },
          {
            "id": 49469,
            "nodeType": "EventDefinition",
            "src": "2151:144:87",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49459,
              "nodeType": "StructuredDocumentation",
              "src": "1852:294:87",
              "text": "@notice Emitted when the admin sets a new NFT descriptor contract.\n @param admin The address of the current contract admin.\n @param oldNFTDescriptor The address of the old NFT descriptor contract.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "eventSelector": "a2548bd4b805e907c1558a47b5858324fe8bb4a2e1ddfca647eecbf65610eebc",
            "name": "SetNFTDescriptor",
            "nameLocation": "2157:16:87",
            "parameters": {
              "id": 49468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49461,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "2199:5:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49469,
                  "src": "2183:21:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49460,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2183:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49464,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldNFTDescriptor",
                  "nameLocation": "2230:16:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49469,
                  "src": "2206:40:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 49463,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49462,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": ["2206:23:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 49923,
                      "src": "2206:23:87"
                    },
                    "referencedDeclaration": 49923,
                    "src": "2206:23:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49467,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "2272:16:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49469,
                  "src": "2248:40:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 49466,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49465,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": ["2248:23:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 49923,
                      "src": "2248:23:87"
                    },
                    "referencedDeclaration": 49923,
                    "src": "2248:23:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2173:121:87"
            }
          },
          {
            "id": 49481,
            "nodeType": "EventDefinition",
            "src": "2660:115:87",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 49470,
              "nodeType": "StructuredDocumentation",
              "src": "2301:354:87",
              "text": "@notice Emitted when assets are withdrawn from a stream.\n @param streamId The id of the stream.\n @param to The address that has received the withdrawn assets.\n @param asset The contract address of the ERC-20 asset used for streaming.\n @param amount The amount of assets withdrawn, denoted in units of the asset's decimals."
            },
            "eventSelector": "40b88e5c41c5a97ffb7b6ef88a0a2d505aa0c634cf8a0275cb236ea7dd87ed4d",
            "name": "WithdrawFromLockupStream",
            "nameLocation": "2666:24:87",
            "parameters": {
              "id": 49480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49472,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "2707:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49481,
                  "src": "2691:24:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49471,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2691:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49474,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2733:2:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49481,
                  "src": "2717:18:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49473,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2717:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49477,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "2752:5:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49481,
                  "src": "2737:20:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" },
                  "typeName": {
                    "id": 49476,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49475,
                      "name": "IERC20",
                      "nameLocations": ["2737:6:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 105,
                      "src": "2737:6:87"
                    },
                    "referencedDeclaration": 105,
                    "src": "2737:6:87",
                    "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49479,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2767:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49481,
                  "src": "2759:14:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49478,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2759:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2690:84:87"
            }
          },
          {
            "id": 49490,
            "nodeType": "FunctionDefinition",
            "src": "3188:73:87",
            "nodes": [],
            "documentation": {
              "id": 49482,
              "nodeType": "StructuredDocumentation",
              "src": "2996:187:87",
              "text": "@notice Retrieves the address of the ERC-20 asset used for streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "eac8f5b8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAsset",
            "nameLocation": "3197:8:87",
            "parameters": {
              "id": 49485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49484,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3214:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49490,
                  "src": "3206:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3206:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3205:18:87"
            },
            "returnParameters": {
              "id": 49489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49488,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "3254:5:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49490,
                  "src": "3247:12:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" },
                  "typeName": {
                    "id": 49487,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49486,
                      "name": "IERC20",
                      "nameLocations": ["3247:6:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 105,
                      "src": "3247:6:87"
                    },
                    "referencedDeclaration": 105,
                    "src": "3247:6:87",
                    "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$105", "typeString": "contract IERC20" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3246:14:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49498,
            "nodeType": "FunctionDefinition",
            "src": "3485:94:87",
            "nodes": [],
            "documentation": {
              "id": 49491,
              "nodeType": "StructuredDocumentation",
              "src": "3267:213:87",
              "text": "@notice Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "a80fc071",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDepositedAmount",
            "nameLocation": "3494:18:87",
            "parameters": {
              "id": 49494,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49493,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3521:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49498,
                  "src": "3513:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49492,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3513:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3512:18:87"
            },
            "returnParameters": {
              "id": 49497,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49496,
                  "mutability": "mutable",
                  "name": "depositedAmount",
                  "nameLocation": "3562:15:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49498,
                  "src": "3554:23:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49495,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3554:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3553:25:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49506,
            "nodeType": "FunctionDefinition",
            "src": "3775:77:87",
            "nodes": [],
            "documentation": {
              "id": 49499,
              "nodeType": "StructuredDocumentation",
              "src": "3585:185:87",
              "text": "@notice Retrieves the stream's end time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "9067b677",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getEndTime",
            "nameLocation": "3784:10:87",
            "parameters": {
              "id": 49502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49501,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3803:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49506,
                  "src": "3795:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49500,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3795:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3794:18:87"
            },
            "returnParameters": {
              "id": 49505,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49504,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "3843:7:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49506,
                  "src": "3836:14:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint40", "typeString": "uint40" },
                  "typeName": {
                    "id": 49503,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "3836:6:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint40", "typeString": "uint40" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3835:16:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49514,
            "nodeType": "FunctionDefinition",
            "src": "4010:82:87",
            "nodes": [],
            "documentation": {
              "id": 49507,
              "nodeType": "StructuredDocumentation",
              "src": "3858:147:87",
              "text": "@notice Retrieves the stream's recipient.\n @dev Reverts if the NFT has been burned.\n @param streamId The stream id for the query."
            },
            "functionSelector": "6d0cee75",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRecipient",
            "nameLocation": "4019:12:87",
            "parameters": {
              "id": 49510,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49509,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4040:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49514,
                  "src": "4032:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49508,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4032:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4031:18:87"
            },
            "returnParameters": {
              "id": 49513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49512,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "4081:9:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49514,
                  "src": "4073:17:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49511,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4073:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4072:19:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49522,
            "nodeType": "FunctionDefinition",
            "src": "4403:92:87",
            "nodes": [],
            "documentation": {
              "id": 49515,
              "nodeType": "StructuredDocumentation",
              "src": "4098:300:87",
              "text": "@notice Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's\n decimals. This amount is always zero unless the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d4dbd20b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRefundedAmount",
            "nameLocation": "4412:17:87",
            "parameters": {
              "id": 49518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49517,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4438:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49522,
                  "src": "4430:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49516,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4430:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4429:18:87"
            },
            "returnParameters": {
              "id": 49521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49520,
                  "mutability": "mutable",
                  "name": "refundedAmount",
                  "nameLocation": "4479:14:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49522,
                  "src": "4471:22:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49519,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "4471:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4470:24:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49530,
            "nodeType": "FunctionDefinition",
            "src": "4662:76:87",
            "nodes": [],
            "documentation": {
              "id": 49523,
              "nodeType": "StructuredDocumentation",
              "src": "4501:156:87",
              "text": "@notice Retrieves the stream's sender.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b971302a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSender",
            "nameLocation": "4671:9:87",
            "parameters": {
              "id": 49526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49525,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4689:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49530,
                  "src": "4681:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49524,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4681:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4680:18:87"
            },
            "returnParameters": {
              "id": 49529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49528,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4730:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49530,
                  "src": "4722:14:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49527,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4722:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4721:16:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49538,
            "nodeType": "FunctionDefinition",
            "src": "4936:81:87",
            "nodes": [],
            "documentation": {
              "id": 49531,
              "nodeType": "StructuredDocumentation",
              "src": "4744:187:87",
              "text": "@notice Retrieves the stream's start time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "bc2be1be",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStartTime",
            "nameLocation": "4945:12:87",
            "parameters": {
              "id": 49534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49533,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4966:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49538,
                  "src": "4958:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4958:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4957:18:87"
            },
            "returnParameters": {
              "id": 49537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49536,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "5006:9:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49538,
                  "src": "4999:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint40", "typeString": "uint40" },
                  "typeName": {
                    "id": 49535,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "4999:6:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint40", "typeString": "uint40" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4998:18:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49546,
            "nodeType": "FunctionDefinition",
            "src": "5243:94:87",
            "nodes": [],
            "documentation": {
              "id": 49539,
              "nodeType": "StructuredDocumentation",
              "src": "5023:215:87",
              "text": "@notice Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d511609f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWithdrawnAmount",
            "nameLocation": "5252:18:87",
            "parameters": {
              "id": 49542,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49541,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5279:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49546,
                  "src": "5271:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49540,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5271:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5270:18:87"
            },
            "returnParameters": {
              "id": 49545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49544,
                  "mutability": "mutable",
                  "name": "withdrawnAmount",
                  "nameLocation": "5320:15:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49546,
                  "src": "5312:23:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49543,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "5312:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5311:25:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49554,
            "nodeType": "FunctionDefinition",
            "src": "5599:76:87",
            "nodes": [],
            "documentation": {
              "id": 49547,
              "nodeType": "StructuredDocumentation",
              "src": "5343:251:87",
              "text": "@notice Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this\n flag is always `false`.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4857501f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCancelable",
            "nameLocation": "5608:12:87",
            "parameters": {
              "id": 49550,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49549,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5629:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49554,
                  "src": "5621:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49548,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5621:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5620:18:87"
            },
            "returnParameters": {
              "id": 49553,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49552,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5667:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49554,
                  "src": "5662:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49551,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5662:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5661:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49562,
            "nodeType": "FunctionDefinition",
            "src": "5904:70:87",
            "nodes": [],
            "documentation": {
              "id": 49555,
              "nodeType": "StructuredDocumentation",
              "src": "5681:218:87",
              "text": "@notice Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "8f69b993",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCold",
            "nameLocation": "5913:6:87",
            "parameters": {
              "id": 49558,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49557,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5928:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49562,
                  "src": "5920:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49556,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5920:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5919:18:87"
            },
            "returnParameters": {
              "id": 49561,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49560,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5966:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49562,
                  "src": "5961:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49559,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5961:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5960:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49570,
            "nodeType": "FunctionDefinition",
            "src": "6170:74:87",
            "nodes": [],
            "documentation": {
              "id": 49563,
              "nodeType": "StructuredDocumentation",
              "src": "5980:185:87",
              "text": "@notice Retrieves a flag indicating whether the stream is depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "425d30dd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isDepleted",
            "nameLocation": "6179:10:87",
            "parameters": {
              "id": 49566,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49565,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6198:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49570,
                  "src": "6190:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49564,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6190:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6189:18:87"
            },
            "returnParameters": {
              "id": 49569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49568,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6236:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49570,
                  "src": "6231:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49567,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6231:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6230:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49578,
            "nodeType": "FunctionDefinition",
            "src": "6443:72:87",
            "nodes": [],
            "documentation": {
              "id": 49571,
              "nodeType": "StructuredDocumentation",
              "src": "6250:188:87",
              "text": "@notice Retrieves a flag indicating whether the stream exists.\n @dev Does not revert if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b8a3be66",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isStream",
            "nameLocation": "6452:8:87",
            "parameters": {
              "id": 49574,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49573,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6469:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49578,
                  "src": "6461:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49572,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6461:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6460:18:87"
            },
            "returnParameters": {
              "id": 49577,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49576,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6507:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49578,
                  "src": "6502:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49575,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6502:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6501:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49586,
            "nodeType": "FunctionDefinition",
            "src": "6722:78:87",
            "nodes": [],
            "documentation": {
              "id": 49579,
              "nodeType": "StructuredDocumentation",
              "src": "6521:196:87",
              "text": "@notice Retrieves a flag indicating whether the stream NFT can be transferred.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b2564569",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isTransferable",
            "nameLocation": "6731:14:87",
            "parameters": {
              "id": 49582,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49581,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6754:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49586,
                  "src": "6746:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49580,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6746:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6745:18:87"
            },
            "returnParameters": {
              "id": 49585,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49584,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6792:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49586,
                  "src": "6787:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49583,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6787:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6786:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49594,
            "nodeType": "FunctionDefinition",
            "src": "7026:70:87",
            "nodes": [],
            "documentation": {
              "id": 49587,
              "nodeType": "StructuredDocumentation",
              "src": "6806:215:87",
              "text": "@notice Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1c1cdd4c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isWarm",
            "nameLocation": "7035:6:87",
            "parameters": {
              "id": 49590,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49589,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7050:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49594,
                  "src": "7042:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49588,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7042:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7041:18:87"
            },
            "returnParameters": {
              "id": 49593,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49592,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "7088:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49594,
                  "src": "7083:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49591,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7083:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7082:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49600,
            "nodeType": "FunctionDefinition",
            "src": "7172:56:87",
            "nodes": [],
            "documentation": {
              "id": 49595,
              "nodeType": "StructuredDocumentation",
              "src": "7102:65:87",
              "text": "@notice Counter for stream ids, used in the create functions."
            },
            "functionSelector": "1e99d569",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "nextStreamId",
            "nameLocation": "7181:12:87",
            "parameters": { "id": 49596, "nodeType": "ParameterList", "parameters": [], "src": "7193:2:87" },
            "returnParameters": {
              "id": 49599,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49598,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 49600,
                  "src": "7219:7:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49597,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7219:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7218:9:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49608,
            "nodeType": "FunctionDefinition",
            "src": "7499:95:87",
            "nodes": [],
            "documentation": {
              "id": 49601,
              "nodeType": "StructuredDocumentation",
              "src": "7234:260:87",
              "text": "@notice Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units\n of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1400ecec",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refundableAmountOf",
            "nameLocation": "7508:18:87",
            "parameters": {
              "id": 49604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49603,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7535:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49608,
                  "src": "7527:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7527:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7526:18:87"
            },
            "returnParameters": {
              "id": 49607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49606,
                  "mutability": "mutable",
                  "name": "refundableAmount",
                  "nameLocation": "7576:16:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49608,
                  "src": "7568:24:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49605,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "7568:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7567:26:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49617,
            "nodeType": "FunctionDefinition",
            "src": "7700:81:87",
            "nodes": [],
            "documentation": {
              "id": 49609,
              "nodeType": "StructuredDocumentation",
              "src": "7600:95:87",
              "text": "@notice Retrieves the stream's status.\n @param streamId The stream id for the query."
            },
            "functionSelector": "ad35efd4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "statusOf",
            "nameLocation": "7709:8:87",
            "parameters": {
              "id": 49612,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49611,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7726:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49617,
                  "src": "7718:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49610,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7718:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7717:18:87"
            },
            "returnParameters": {
              "id": 49616,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49615,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "7773:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49617,
                  "src": "7759:20:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_enum$_Status_$51602", "typeString": "enum Lockup.Status" },
                  "typeName": {
                    "id": 49614,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49613,
                      "name": "Lockup.Status",
                      "nameLocations": ["7759:6:87", "7766:6:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 51602,
                      "src": "7759:13:87"
                    },
                    "referencedDeclaration": 51602,
                    "src": "7759:13:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$51602",
                      "typeString": "enum Lockup.Status"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7758:22:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49625,
            "nodeType": "FunctionDefinition",
            "src": "8008:91:87",
            "nodes": [],
            "documentation": {
              "id": 49618,
              "nodeType": "StructuredDocumentation",
              "src": "7787:216:87",
              "text": "@notice Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4869e12d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "streamedAmountOf",
            "nameLocation": "8017:16:87",
            "parameters": {
              "id": 49621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49620,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8042:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49625,
                  "src": "8034:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8034:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8033:18:87"
            },
            "returnParameters": {
              "id": 49624,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49623,
                  "mutability": "mutable",
                  "name": "streamedAmount",
                  "nameLocation": "8083:14:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49625,
                  "src": "8075:22:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49622,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8075:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8074:24:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49633,
            "nodeType": "FunctionDefinition",
            "src": "8296:75:87",
            "nodes": [],
            "documentation": {
              "id": 49626,
              "nodeType": "StructuredDocumentation",
              "src": "8105:186:87",
              "text": "@notice Retrieves a flag indicating whether the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "f590c176",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wasCanceled",
            "nameLocation": "8305:11:87",
            "parameters": {
              "id": 49629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49628,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8325:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49633,
                  "src": "8317:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49627,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8317:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8316:18:87"
            },
            "returnParameters": {
              "id": 49632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49631,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "8363:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49633,
                  "src": "8358:11:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 49630,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8358:4:87",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8357:13:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49641,
            "nodeType": "FunctionDefinition",
            "src": "8628:99:87",
            "nodes": [],
            "documentation": {
              "id": 49634,
              "nodeType": "StructuredDocumentation",
              "src": "8377:246:87",
              "text": "@notice Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's\n decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d975dfed",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawableAmountOf",
            "nameLocation": "8637:20:87",
            "parameters": {
              "id": 49637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49636,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8666:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49641,
                  "src": "8658:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49635,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8658:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8657:18:87"
            },
            "returnParameters": {
              "id": 49640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49639,
                  "mutability": "mutable",
                  "name": "withdrawableAmount",
                  "nameLocation": "8707:18:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49641,
                  "src": "8699:26:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49638,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8699:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8698:28:87"
            },
            "scope": 49712,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49647,
            "nodeType": "FunctionDefinition",
            "src": "9355:41:87",
            "nodes": [],
            "documentation": {
              "id": 49642,
              "nodeType": "StructuredDocumentation",
              "src": "8950:400:87",
              "text": "@notice Burns the NFT associated with the stream.\n @dev Emits a {Transfer} event.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a depleted stream.\n - The NFT must exist.\n - `msg.sender` must be either the NFT owner or an approved third party.\n @param streamId The id of the stream NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "9364:4:87",
            "parameters": {
              "id": 49645,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49644,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "9377:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49647,
                  "src": "9369:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49643,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9369:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9368:18:87"
            },
            "returnParameters": { "id": 49646, "nodeType": "ParameterList", "parameters": [], "src": "9395:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49653,
            "nodeType": "FunctionDefinition",
            "src": "10094:43:87",
            "nodes": [],
            "documentation": {
              "id": 49648,
              "nodeType": "StructuredDocumentation",
              "src": "9402:687:87",
              "text": "@notice Cancels the stream and refunds any remaining assets to the sender.\n @dev Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event.\n Notes:\n - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the\n stream is marked as depleted.\n - This function attempts to invoke a hook on the recipient, if the resolved address is a contract.\n Requirements:\n - Must not be delegate called.\n - The stream must be warm and cancelable.\n - `msg.sender` must be the stream's sender.\n @param streamId The id of the stream to cancel."
            },
            "functionSelector": "40e58ee5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancel",
            "nameLocation": "10103:6:87",
            "parameters": {
              "id": 49651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49650,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "10118:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49653,
                  "src": "10110:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49649,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10110:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10109:18:87"
            },
            "returnParameters": { "id": 49652, "nodeType": "ParameterList", "parameters": [], "src": "10136:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49660,
            "nodeType": "FunctionDefinition",
            "src": "10563:63:87",
            "nodes": [],
            "documentation": {
              "id": 49654,
              "nodeType": "StructuredDocumentation",
              "src": "10143:415:87",
              "text": "@notice Cancels multiple streams and refunds any remaining assets to the sender.\n @dev Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events.\n Notes:\n - Refer to the notes in {cancel}.\n Requirements:\n - All requirements from {cancel} must be met for each stream.\n @param streamIds The ids of the streams to cancel."
            },
            "functionSelector": "8659c270",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelMultiple",
            "nameLocation": "10572:14:87",
            "parameters": {
              "id": 49658,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49657,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "10606:9:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49660,
                  "src": "10587:28:87",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 49655,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10587:7:87",
                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                    },
                    "id": 49656,
                    "nodeType": "ArrayTypeName",
                    "src": "10587:9:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10586:30:87"
            },
            "returnParameters": { "id": 49659, "nodeType": "ParameterList", "parameters": [], "src": "10625:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49666,
            "nodeType": "FunctionDefinition",
            "src": "11258:45:87",
            "nodes": [],
            "documentation": {
              "id": 49661,
              "nodeType": "StructuredDocumentation",
              "src": "10632:621:87",
              "text": "@notice Removes the right of the stream's sender to cancel the stream.\n @dev Emits a {RenounceLockupStream} and {MetadataUpdate} event.\n Notes:\n - This is an irreversible operation.\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a warm stream.\n - `msg.sender` must be the stream's sender.\n - The stream must be cancelable.\n @param streamId The id of the stream to renounce."
            },
            "functionSelector": "7de6b1db",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "renounce",
            "nameLocation": "11267:8:87",
            "parameters": {
              "id": 49664,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49663,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "11284:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49666,
                  "src": "11276:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49662,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11276:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11275:18:87"
            },
            "returnParameters": { "id": 49665, "nodeType": "ParameterList", "parameters": [], "src": "11302:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49673,
            "nodeType": "FunctionDefinition",
            "src": "11754:77:87",
            "nodes": [],
            "documentation": {
              "id": 49667,
              "nodeType": "StructuredDocumentation",
              "src": "11309:440:87",
              "text": "@notice Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\n @dev Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event.\n Notes:\n - Does not revert if the NFT descriptor is the same.\n Requirements:\n - `msg.sender` must be the contract admin.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "functionSelector": "7cad6cd1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setNFTDescriptor",
            "nameLocation": "11763:16:87",
            "parameters": {
              "id": 49671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49670,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "11804:16:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49673,
                  "src": "11780:40:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 49669,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49668,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": ["11780:23:87"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 49923,
                      "src": "11780:23:87"
                    },
                    "referencedDeclaration": 49923,
                    "src": "11780:23:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$49923",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11779:42:87"
            },
            "returnParameters": { "id": 49672, "nodeType": "ParameterList", "parameters": [], "src": "11830:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49683,
            "nodeType": "FunctionDefinition",
            "src": "12912:73:87",
            "nodes": [],
            "documentation": {
              "id": 49674,
              "nodeType": "StructuredDocumentation",
              "src": "11837:1070:87",
              "text": "@notice Withdraws the provided amount of assets from the stream to the `to` address.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract\n and `msg.sender` is either the sender or an approved operator.\n Requirements:\n - Must not be delegate called.\n - `streamId` must not reference a null or depleted stream.\n - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party.\n - `to` must be the recipient if `msg.sender` is the stream's sender.\n - `to` must not be the zero address.\n - `amount` must be greater than zero and must not exceed the withdrawable amount.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amount The amount to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "fdd46d60",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "12921:8:87",
            "parameters": {
              "id": 49681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49676,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "12938:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49683,
                  "src": "12930:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49675,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12930:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49678,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "12956:2:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49683,
                  "src": "12948:10:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49677,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12948:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49680,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12968:6:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49683,
                  "src": "12960:14:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" },
                  "typeName": {
                    "id": 49679,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "12960:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12929:46:87"
            },
            "returnParameters": { "id": 49682, "nodeType": "ParameterList", "parameters": [], "src": "12984:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49691,
            "nodeType": "FunctionDefinition",
            "src": "13473:60:87",
            "nodes": [],
            "documentation": {
              "id": 49684,
              "nodeType": "StructuredDocumentation",
              "src": "12991:477:87",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - Refer to the notes in {withdraw}.\n Requirements:\n - Refer to the requirements in {withdraw}.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets."
            },
            "functionSelector": "ea5ead19",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMax",
            "nameLocation": "13482:11:87",
            "parameters": {
              "id": 49689,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49686,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "13502:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49691,
                  "src": "13494:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49685,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13494:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49688,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "13520:2:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49691,
                  "src": "13512:10:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49687,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13512:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13493:30:87"
            },
            "returnParameters": { "id": 49690, "nodeType": "ParameterList", "parameters": [], "src": "13532:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49699,
            "nodeType": "FunctionDefinition",
            "src": "14253:81:87",
            "nodes": [],
            "documentation": {
              "id": 49692,
              "nodeType": "StructuredDocumentation",
              "src": "13539:709:87",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the\n NFT to `newRecipient`.\n @dev Emits a {WithdrawFromLockupStream} and a {Transfer} event.\n Notes:\n - If the withdrawable amount is zero, the withdrawal is skipped.\n - Refer to the notes in {withdraw}.\n Requirements:\n - `msg.sender` must be the stream's recipient.\n - Refer to the requirements in {withdraw}.\n - Refer to the requirements in {IERC721.transferFrom}.\n @param streamId The id of the stream NFT to transfer.\n @param newRecipient The address of the new owner of the stream NFT."
            },
            "functionSelector": "c156a11d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMaxAndTransfer",
            "nameLocation": "14262:22:87",
            "parameters": {
              "id": 49697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49694,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "14293:8:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49699,
                  "src": "14285:16:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 49693,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14285:7:87",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49696,
                  "mutability": "mutable",
                  "name": "newRecipient",
                  "nameLocation": "14311:12:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49699,
                  "src": "14303:20:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49695,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14303:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14284:40:87"
            },
            "returnParameters": { "id": 49698, "nodeType": "ParameterList", "parameters": [], "src": "14333:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 49711,
            "nodeType": "FunctionDefinition",
            "src": "15061:105:87",
            "nodes": [],
            "documentation": {
              "id": 49700,
              "nodeType": "StructuredDocumentation",
              "src": "14340:716:87",
              "text": "@notice Withdraws assets from streams to the provided address `to`.\n @dev Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events.\n Notes:\n - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient.\n Requirements:\n - All requirements from {withdraw} must be met for each stream.\n - There must be an equal number of `streamIds` and `amounts`.\n @param streamIds The ids of the streams to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amounts The amounts to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "a2ffb897",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMultiple",
            "nameLocation": "15070:16:87",
            "parameters": {
              "id": 49709,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49703,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "15106:9:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49711,
                  "src": "15087:28:87",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 49701,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15087:7:87",
                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                    },
                    "id": 49702,
                    "nodeType": "ArrayTypeName",
                    "src": "15087:9:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49705,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "15125:2:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49711,
                  "src": "15117:10:87",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 49704,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15117:7:87",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49708,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "15148:7:87",
                  "nodeType": "VariableDeclaration",
                  "scope": 49711,
                  "src": "15129:26:87",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
                    "typeString": "uint128[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 49706,
                      "name": "uint128",
                      "nodeType": "ElementaryTypeName",
                      "src": "15129:7:87",
                      "typeDescriptions": { "typeIdentifier": "t_uint128", "typeString": "uint128" }
                    },
                    "id": 49707,
                    "nodeType": "ArrayTypeName",
                    "src": "15129:9:87",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                      "typeString": "uint128[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15086:70:87"
            },
            "returnParameters": { "id": 49710, "nodeType": "ParameterList", "parameters": [], "src": "15165:0:87" },
            "scope": 49712,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 49434,
              "name": "ISablierV2Base",
              "nameLocations": ["565:14:87"],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 49323,
              "src": "565:14:87"
            },
            "id": 49435,
            "nodeType": "InheritanceSpecifier",
            "src": "565:14:87"
          },
          {
            "baseName": {
              "id": 49436,
              "name": "IERC721Metadata",
              "nameLocations": ["610:15:87"],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1630,
              "src": "610:15:87"
            },
            "id": 49437,
            "nodeType": "InheritanceSpecifier",
            "src": "610:15:87"
          }
        ],
        "canonicalName": "ISablierV2Lockup",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 49433,
          "nodeType": "StructuredDocumentation",
          "src": "427:104:87",
          "text": "@title ISablierV2Lockup\n @notice Common logic between all Sablier V2 Lockup streaming contracts."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [49712, 1630, 1585, 2294, 49323, 49251],
        "name": "ISablierV2Lockup",
        "nameLocation": "541:16:87",
        "scope": 49713,
        "usedErrors": [],
        "usedEvents": [1484, 1493, 1502, 49238, 49274, 49285, 49453, 49458, 49469, 49481]
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 87
}
