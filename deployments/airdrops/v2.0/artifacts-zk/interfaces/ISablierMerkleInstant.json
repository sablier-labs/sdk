{
  "abi": [
    {
      "type": "function",
      "name": "CAMPAIGN_START_TIME",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint40", "internalType": "uint40" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "COMPTROLLER",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "EXPIRATION",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint40", "internalType": "uint40" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "IS_SABLIER_MERKLE",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "MERKLE_ROOT",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "TOKEN",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "contract IERC20" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "admin",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "calculateMinFeeWei",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "campaignName",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "claim",
      "inputs": [
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "recipient", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint128", "internalType": "uint128" },
        { "name": "merkleProof", "type": "bytes32[]", "internalType": "bytes32[]" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "claimTo",
      "inputs": [
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint128", "internalType": "uint128" },
        { "name": "merkleProof", "type": "bytes32[]", "internalType": "bytes32[]" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "claimViaSig",
      "inputs": [
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "recipient", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint128", "internalType": "uint128" },
        { "name": "validFrom", "type": "uint40", "internalType": "uint40" },
        { "name": "merkleProof", "type": "bytes32[]", "internalType": "bytes32[]" },
        { "name": "signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "clawback",
      "inputs": [
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint128", "internalType": "uint128" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "domainSeparator",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "firstClaimTime",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint40", "internalType": "uint40" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasClaimed",
      "inputs": [{ "name": "index", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasExpired",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "ipfsCID",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "lowerMinFeeUSD",
      "inputs": [{ "name": "newMinFeeUSD", "type": "uint256", "internalType": "uint256" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "minFeeUSD",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferAdmin",
      "inputs": [{ "name": "newAdmin", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "ClaimInstant",
      "inputs": [
        { "name": "index", "type": "uint256", "indexed": false, "internalType": "uint256" },
        { "name": "recipient", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "amount", "type": "uint128", "indexed": false, "internalType": "uint128" },
        { "name": "to", "type": "address", "indexed": false, "internalType": "address" },
        { "name": "viaSig", "type": "bool", "indexed": false, "internalType": "bool" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Clawback",
      "inputs": [
        { "name": "admin", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "to", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "amount", "type": "uint128", "indexed": false, "internalType": "uint128" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "LowerMinFeeUSD",
      "inputs": [
        { "name": "comptroller", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "newMinFeeUSD", "type": "uint256", "indexed": false, "internalType": "uint256" },
        { "name": "previousMinFeeUSD", "type": "uint256", "indexed": false, "internalType": "uint256" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "TransferAdmin",
      "inputs": [
        { "name": "oldAdmin", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "newAdmin", "type": "address", "indexed": true, "internalType": "address" }
      ],
      "anonymous": false
    }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "CAMPAIGN_START_TIME()": "7ca3944d",
    "COMPTROLLER()": "5f82c67e",
    "EXPIRATION()": "bb4b5734",
    "IS_SABLIER_MERKLE()": "7423649b",
    "MERKLE_ROOT()": "51e75e8b",
    "TOKEN()": "82bfefc8",
    "admin()": "f851a440",
    "calculateMinFeeWei()": "3a12a5bc",
    "campaignName()": "0724fda9",
    "claim(uint256,address,uint128,bytes32[])": "3f31ae3f",
    "claimTo(uint256,address,uint128,bytes32[])": "0854a79c",
    "claimViaSig(uint256,address,address,uint128,uint40,bytes32[],bytes)": "20743583",
    "clawback(address,uint128)": "1686c909",
    "domainSeparator()": "f698da25",
    "firstClaimTime()": "82d72f7f",
    "hasClaimed(uint256)": "ce516507",
    "hasExpired()": "90e64d13",
    "ipfsCID()": "49fc73dd",
    "lowerMinFeeUSD(uint256)": "8ec68869",
    "minFeeUSD()": "4e0bb8cc",
    "transferAdmin(address)": "75829def"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"viaSig\",\"type\":\"bool\"}],\"name\":\"ClaimInstant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Clawback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinFeeUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinFeeUSD\",\"type\":\"uint256\"}],\"name\":\"LowerMinFeeUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAMPAIGN_START_TIME\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPIRATION\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SABLIER_MERKLE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMinFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"validFrom\",\"type\":\"uint40\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimViaSig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstClaimTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipfsCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinFeeUSD\",\"type\":\"uint256\"}],\"name\":\"lowerMinFeeUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimInstant(uint256,address,uint128,address,bool)\":{\"params\":{\"amount\":\"The amount of ERC-20 tokens claimed.\",\"index\":\"The index of the airdrop recipient in the Merkle tree.\",\"recipient\":\"The address of the airdrop recipient.\",\"to\":\"The address receiving the claim amount on behalf of the airdrop recipient.\",\"viaSig\":\"Bool indicating whether the claim is made via a signature.\"}},\"TransferAdmin(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new admin.\",\"oldAdmin\":\"The address of the old admin.\"}}},\"kind\":\"dev\",\"methods\":{\"CAMPAIGN_START_TIME()\":{\"details\":\"This is an immutable state variable.\"},\"EXPIRATION()\":{\"details\":\"This is an immutable state variable.\"},\"IS_SABLIER_MERKLE()\":{\"details\":\"This is a constant state variable.\"},\"MERKLE_ROOT()\":{\"details\":\"This is an immutable state variable.\"},\"TOKEN()\":{\"details\":\"This is an immutable state variable.\"},\"claim(uint256,address,uint128,bytes32[])\":{\"details\":\"It emits a {ClaimInstant} event. Requirements: - The current time must be greater than or equal to the campaign start time. - The campaign must not have expired. - `msg.value` must not be less than the value returned by {COMPTROLLER.calculateMinFeeWei}. - The `index` must not be claimed already. - The Merkle proof must be valid.\",\"params\":{\"amount\":\"The amount of ERC-20 tokens allocated to the recipient.\",\"index\":\"The index of the recipient in the Merkle tree.\",\"merkleProof\":\"The proof of inclusion in the Merkle tree.\",\"recipient\":\"The address of the airdrop recipient.\"}},\"claimTo(uint256,address,uint128,bytes32[])\":{\"details\":\"It emits a {ClaimInstant} event. Requirements: - `msg.sender` must be the airdrop recipient. - The `to` must not be the zero address. - Refer to the requirements in {claim}.\",\"params\":{\"amount\":\"The amount of ERC-20 tokens allocated to the `msg.sender`.\",\"index\":\"The index of the `msg.sender` in the Merkle tree.\",\"merkleProof\":\"The proof of inclusion in the Merkle tree.\",\"to\":\"The address receiving the ERC-20 tokens on behalf of `msg.sender`.\"}},\"claimViaSig(uint256,address,address,uint128,uint40,bytes32[],bytes)\":{\"details\":\"It emits a {ClaimInstant} event. Requirements: - If `recipient` is an EOA, it must match the recovered signer. - If `recipient` is a contract, it must implement the IERC-1271 interface. - The `to` must not be the zero address. - The `validFrom` must be less than or equal to the current block timestamp. - Refer to the requirements in {claim}. Below is the example of typed data to be signed by the airdrop recipient, referenced from https://docs.metamask.io/wallet/how-to/sign-data/#example. ```json types: {   EIP712Domain: [     { name: \\\"name\\\", type: \\\"string\\\" },     { name: \\\"chainId\\\", type: \\\"uint256\\\" },     { name: \\\"verifyingContract\\\", type: \\\"address\\\" },   ],   Claim: [     { name: \\\"index\\\", type: \\\"uint256\\\" },     { name: \\\"recipient\\\", type: \\\"address\\\" },     { name: \\\"to\\\", type: \\\"address\\\" },     { name: \\\"amount\\\", type: \\\"uint128\\\" },     { name: \\\"validFrom\\\", type: \\\"uint40\\\" },   ], }, domain: {   name: \\\"Sablier Airdrops Protocol\\\",   chainId: 1, // Chain on which the contract is deployed   verifyingContract: \\\"0xTheAddressOfThisContract\\\", // The address of this contract }, primaryType: \\\"Claim\\\", message: {   index: 2, // The index of the signer in the Merkle tree   recipient: \\\"0xTheAddressOfTheRecipient\\\", // The address of the airdrop recipient   to: \\\"0xTheAddressReceivingTheTokens\\\", // The address where recipient wants to transfer the tokens   amount: \\\"1000000000000000000000\\\", // The amount of tokens allocated to the recipient   validFrom: 1752425637 // The timestamp from which the claim signature is valid }, ```\",\"params\":{\"amount\":\"The amount of ERC-20 tokens allocated to the recipient.\",\"index\":\"The index of the recipient in the Merkle tree.\",\"merkleProof\":\"The proof of inclusion in the Merkle tree.\",\"recipient\":\"The address of the airdrop recipient who is providing the signature.\",\"signature\":\"The EIP-712 or EIP-1271 signature from the airdrop recipient.\",\"to\":\"The address receiving the ERC-20 tokens on behalf of the recipient.\",\"validFrom\":\"The timestamp from which the claim signature is valid.\"}},\"clawback(address,uint128)\":{\"details\":\"Emits a {Clawback} event. Requirements: - `msg.sender` must be the admin. - No claim must be made, OR   The current timestamp must not exceed 7 days after the first claim, OR   The campaign must be expired.\",\"params\":{\"amount\":\"The amount of tokens to claw back.\",\"to\":\"The address to receive the tokens.\"}},\"hasClaimed(uint256)\":{\"details\":\"Uses a bitmap to save gas.\",\"params\":{\"index\":\"The index of the recipient to check.\"}},\"ipfsCID()\":{\"details\":\"An empty value may break certain UI features that depend upon the IPFS CID.\"},\"lowerMinFeeUSD(uint256)\":{\"details\":\"Emits a {LowerMinFeeUSD} event. Requirements: - `msg.sender` must be the comptroller. - The new fee must be less than the current {minFeeUSD}.\",\"params\":{\"newMinFeeUSD\":\"The new min USD fee to set, denominated in 8 decimals.\"}},\"minFeeUSD()\":{\"details\":\"The denomination is based on Chainlink's 8-decimal format for USD prices, where 1e8 is $1.\"},\"transferAdmin(address)\":{\"details\":\"Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newAdmin\":\"The address of the new admin.\"}}},\"title\":\"ISablierMerkleInstant\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimInstant(uint256,address,uint128,address,bool)\":{\"notice\":\"Emitted when an airdrop is claimed on behalf of an eligible recipient.\"},\"Clawback(address,address,uint128)\":{\"notice\":\"Emitted when the admin claws back the unclaimed tokens.\"},\"LowerMinFeeUSD(address,uint256,uint256)\":{\"notice\":\"Emitted when the min USD fee is lowered by the comptroller.\"},\"TransferAdmin(address,address)\":{\"notice\":\"Emitted when the admin is transferred.\"}},\"kind\":\"user\",\"methods\":{\"CAMPAIGN_START_TIME()\":{\"notice\":\"The timestamp at which campaign starts and claim begins.\"},\"COMPTROLLER()\":{\"notice\":\"Retrieves the address of the comptroller contract.\"},\"EXPIRATION()\":{\"notice\":\"The cut-off point for the campaign, as a Unix timestamp. A value of zero means there is no expiration.\"},\"IS_SABLIER_MERKLE()\":{\"notice\":\"Returns `true` indicating that this campaign contract is deployed using the Sablier Factory.\"},\"MERKLE_ROOT()\":{\"notice\":\"The root of the Merkle tree used to validate the proofs of inclusion.\"},\"TOKEN()\":{\"notice\":\"The ERC-20 token to distribute.\"},\"admin()\":{\"notice\":\"The address of the admin account or contract.\"},\"calculateMinFeeWei()\":{\"notice\":\"Calculates the minimum fee in wei required to claim the airdrop.\"},\"campaignName()\":{\"notice\":\"Retrieves the name of the campaign.\"},\"claim(uint256,address,uint128,bytes32[])\":{\"notice\":\"Claim airdrop on behalf of eligible recipient and transfer it to the recipient address.\"},\"claimTo(uint256,address,uint128,bytes32[])\":{\"notice\":\"Claim airdrop and transfer the tokens to the `to` address.\"},\"claimViaSig(uint256,address,address,uint128,uint40,bytes32[],bytes)\":{\"notice\":\"Claim airdrop on behalf of eligible recipient using an EIP-712 or EIP-1271 signature, and transfer the tokens to the `to` address.\"},\"clawback(address,uint128)\":{\"notice\":\"Claws back the unclaimed tokens.\"},\"domainSeparator()\":{\"notice\":\"The domain separator, as required by EIP-712 and EIP-1271, used for signing claim to prevent replay attacks across different campaigns.\"},\"firstClaimTime()\":{\"notice\":\"Retrieves the timestamp when the first claim is made, and zero if no claim was made yet.\"},\"hasClaimed(uint256)\":{\"notice\":\"Returns a flag indicating whether a claim has been made for a given index.\"},\"hasExpired()\":{\"notice\":\"Returns a flag indicating whether the campaign has expired.\"},\"ipfsCID()\":{\"notice\":\"The content identifier for indexing the campaign on IPFS.\"},\"lowerMinFeeUSD(uint256)\":{\"notice\":\"Lowers the min USD fee.\"},\"minFeeUSD()\":{\"notice\":\"Retrieves the min USD fee required to claim the airdrop, denominated in 8 decimals.\"},\"transferAdmin(address)\":{\"notice\":\"Transfers the contract admin to a new address.\"}},\"notice\":\"MerkleInstant enables an airdrop model where eligible users receive the tokens as soon as they claim.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISablierMerkleInstant.sol\":\"ISablierMerkleInstant\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[\":@arbitrum/=node_modules/@arbitrum/\",\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@offchainlabs/=node_modules/@offchainlabs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/=node_modules/@prb/\",\":@sablier/=node_modules/@sablier/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@zksync/=node_modules/@zksync/\",\":forge-std/=node_modules/forge-std/\",\":murky/=node_modules/murky/\",\":openzeppelin-contracts/=node_modules/murky/lib/openzeppelin-contracts/\",\":solady/=node_modules/solady/\"],\"viaIR\":true},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"node_modules/@sablier/evm-utils/src/interfaces/IAdminable.sol\":{\"keccak256\":\"0x3228d63e9b0b951030c73c42bb071e64f0ff0eadbcbeefad3f29a48366539c26\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://acc90ad2bec0e84349b56611b35b56bfb75a5930fd1babb2bd638fbbb15bd126\",\"dweb:/ipfs/QmSLnHx6bo4BQeBKYferfEhZo1Z4xCXdDF1bzJoHUafHt4\"]},\"src/interfaces/ISablierMerkleBase.sol\":{\"keccak256\":\"0x822d093de7c9af6aa476b2018402fd53a6caf67aa9454855ff56a0b312abce02\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://44671ca0853c3b45085b956e329f37079591441e240bf65b89e53b2a1ce767f4\",\"dweb:/ipfs/QmSPEA4Z9bwgL7pYjkJPykbnVamLeGACCwMWfmGH58zZu9\"]},\"src/interfaces/ISablierMerkleInstant.sol\":{\"keccak256\":\"0x6ddd0d1535d2c498a70e3d9e9eaf336e155e9340000f6c2bf22009a65ee20a2c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5570d60b0f797b55b14a11a5073584b8c1c77edd97a92753feb77e6ddeed60dc\",\"dweb:/ipfs/QmcCvoHVmHwj58j8ivQNq2X7e5ZAq4XGHpUBATH54iT8Hc\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.29+commit.ab55807c" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            { "internalType": "uint256", "name": "index", "type": "uint256", "indexed": false },
            { "internalType": "address", "name": "recipient", "type": "address", "indexed": true },
            { "internalType": "uint128", "name": "amount", "type": "uint128", "indexed": false },
            { "internalType": "address", "name": "to", "type": "address", "indexed": false },
            { "internalType": "bool", "name": "viaSig", "type": "bool", "indexed": false }
          ],
          "type": "event",
          "name": "ClaimInstant",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "admin", "type": "address", "indexed": true },
            { "internalType": "address", "name": "to", "type": "address", "indexed": true },
            { "internalType": "uint128", "name": "amount", "type": "uint128", "indexed": false }
          ],
          "type": "event",
          "name": "Clawback",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "comptroller", "type": "address", "indexed": true },
            { "internalType": "uint256", "name": "newMinFeeUSD", "type": "uint256", "indexed": false },
            { "internalType": "uint256", "name": "previousMinFeeUSD", "type": "uint256", "indexed": false }
          ],
          "type": "event",
          "name": "LowerMinFeeUSD",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "oldAdmin", "type": "address", "indexed": true },
            { "internalType": "address", "name": "newAdmin", "type": "address", "indexed": true }
          ],
          "type": "event",
          "name": "TransferAdmin",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CAMPAIGN_START_TIME",
          "outputs": [{ "internalType": "uint40", "name": "", "type": "uint40" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "COMPTROLLER",
          "outputs": [{ "internalType": "address", "name": "", "type": "address" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "EXPIRATION",
          "outputs": [{ "internalType": "uint40", "name": "", "type": "uint40" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_SABLIER_MERKLE",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MERKLE_ROOT",
          "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "TOKEN",
          "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [{ "internalType": "address", "name": "", "type": "address" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateMinFeeWei",
          "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "campaignName",
          "outputs": [{ "internalType": "string", "name": "", "type": "string" }]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "recipient", "type": "address" },
            { "internalType": "uint128", "name": "amount", "type": "uint128" },
            { "internalType": "bytes32[]", "name": "merkleProof", "type": "bytes32[]" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint128", "name": "amount", "type": "uint128" },
            { "internalType": "bytes32[]", "name": "merkleProof", "type": "bytes32[]" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claimTo"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "recipient", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint128", "name": "amount", "type": "uint128" },
            { "internalType": "uint40", "name": "validFrom", "type": "uint40" },
            { "internalType": "bytes32[]", "name": "merkleProof", "type": "bytes32[]" },
            { "internalType": "bytes", "name": "signature", "type": "bytes" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claimViaSig"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint128", "name": "amount", "type": "uint128" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "clawback"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "domainSeparator",
          "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "firstClaimTime",
          "outputs": [{ "internalType": "uint40", "name": "", "type": "uint40" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }],
          "stateMutability": "view",
          "type": "function",
          "name": "hasClaimed",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "hasExpired",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "ipfsCID",
          "outputs": [{ "internalType": "string", "name": "", "type": "string" }]
        },
        {
          "inputs": [{ "internalType": "uint256", "name": "newMinFeeUSD", "type": "uint256" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lowerMinFeeUSD"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "minFeeUSD",
          "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "newAdmin", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdmin"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "CAMPAIGN_START_TIME()": { "details": "This is an immutable state variable." },
          "EXPIRATION()": { "details": "This is an immutable state variable." },
          "IS_SABLIER_MERKLE()": { "details": "This is a constant state variable." },
          "MERKLE_ROOT()": { "details": "This is an immutable state variable." },
          "TOKEN()": { "details": "This is an immutable state variable." },
          "claim(uint256,address,uint128,bytes32[])": {
            "details": "It emits a {ClaimInstant} event. Requirements: - The current time must be greater than or equal to the campaign start time. - The campaign must not have expired. - `msg.value` must not be less than the value returned by {COMPTROLLER.calculateMinFeeWei}. - The `index` must not be claimed already. - The Merkle proof must be valid.",
            "params": {
              "amount": "The amount of ERC-20 tokens allocated to the recipient.",
              "index": "The index of the recipient in the Merkle tree.",
              "merkleProof": "The proof of inclusion in the Merkle tree.",
              "recipient": "The address of the airdrop recipient."
            }
          },
          "claimTo(uint256,address,uint128,bytes32[])": {
            "details": "It emits a {ClaimInstant} event. Requirements: - `msg.sender` must be the airdrop recipient. - The `to` must not be the zero address. - Refer to the requirements in {claim}.",
            "params": {
              "amount": "The amount of ERC-20 tokens allocated to the `msg.sender`.",
              "index": "The index of the `msg.sender` in the Merkle tree.",
              "merkleProof": "The proof of inclusion in the Merkle tree.",
              "to": "The address receiving the ERC-20 tokens on behalf of `msg.sender`."
            }
          },
          "claimViaSig(uint256,address,address,uint128,uint40,bytes32[],bytes)": {
            "details": "It emits a {ClaimInstant} event. Requirements: - If `recipient` is an EOA, it must match the recovered signer. - If `recipient` is a contract, it must implement the IERC-1271 interface. - The `to` must not be the zero address. - The `validFrom` must be less than or equal to the current block timestamp. - Refer to the requirements in {claim}. Below is the example of typed data to be signed by the airdrop recipient, referenced from https://docs.metamask.io/wallet/how-to/sign-data/#example. ```json types: {   EIP712Domain: [     { name: \"name\", type: \"string\" },     { name: \"chainId\", type: \"uint256\" },     { name: \"verifyingContract\", type: \"address\" },   ],   Claim: [     { name: \"index\", type: \"uint256\" },     { name: \"recipient\", type: \"address\" },     { name: \"to\", type: \"address\" },     { name: \"amount\", type: \"uint128\" },     { name: \"validFrom\", type: \"uint40\" },   ], }, domain: {   name: \"Sablier Airdrops Protocol\",   chainId: 1, // Chain on which the contract is deployed   verifyingContract: \"0xTheAddressOfThisContract\", // The address of this contract }, primaryType: \"Claim\", message: {   index: 2, // The index of the signer in the Merkle tree   recipient: \"0xTheAddressOfTheRecipient\", // The address of the airdrop recipient   to: \"0xTheAddressReceivingTheTokens\", // The address where recipient wants to transfer the tokens   amount: \"1000000000000000000000\", // The amount of tokens allocated to the recipient   validFrom: 1752425637 // The timestamp from which the claim signature is valid }, ```",
            "params": {
              "amount": "The amount of ERC-20 tokens allocated to the recipient.",
              "index": "The index of the recipient in the Merkle tree.",
              "merkleProof": "The proof of inclusion in the Merkle tree.",
              "recipient": "The address of the airdrop recipient who is providing the signature.",
              "signature": "The EIP-712 or EIP-1271 signature from the airdrop recipient.",
              "to": "The address receiving the ERC-20 tokens on behalf of the recipient.",
              "validFrom": "The timestamp from which the claim signature is valid."
            }
          },
          "clawback(address,uint128)": {
            "details": "Emits a {Clawback} event. Requirements: - `msg.sender` must be the admin. - No claim must be made, OR   The current timestamp must not exceed 7 days after the first claim, OR   The campaign must be expired.",
            "params": { "amount": "The amount of tokens to claw back.", "to": "The address to receive the tokens." }
          },
          "hasClaimed(uint256)": {
            "details": "Uses a bitmap to save gas.",
            "params": { "index": "The index of the recipient to check." }
          },
          "ipfsCID()": { "details": "An empty value may break certain UI features that depend upon the IPFS CID." },
          "lowerMinFeeUSD(uint256)": {
            "details": "Emits a {LowerMinFeeUSD} event. Requirements: - `msg.sender` must be the comptroller. - The new fee must be less than the current {minFeeUSD}.",
            "params": { "newMinFeeUSD": "The new min USD fee to set, denominated in 8 decimals." }
          },
          "minFeeUSD()": {
            "details": "The denomination is based on Chainlink's 8-decimal format for USD prices, where 1e8 is $1."
          },
          "transferAdmin(address)": {
            "details": "Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.",
            "params": { "newAdmin": "The address of the new admin." }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "CAMPAIGN_START_TIME()": { "notice": "The timestamp at which campaign starts and claim begins." },
          "COMPTROLLER()": { "notice": "Retrieves the address of the comptroller contract." },
          "EXPIRATION()": {
            "notice": "The cut-off point for the campaign, as a Unix timestamp. A value of zero means there is no expiration."
          },
          "IS_SABLIER_MERKLE()": {
            "notice": "Returns `true` indicating that this campaign contract is deployed using the Sablier Factory."
          },
          "MERKLE_ROOT()": { "notice": "The root of the Merkle tree used to validate the proofs of inclusion." },
          "TOKEN()": { "notice": "The ERC-20 token to distribute." },
          "admin()": { "notice": "The address of the admin account or contract." },
          "calculateMinFeeWei()": { "notice": "Calculates the minimum fee in wei required to claim the airdrop." },
          "campaignName()": { "notice": "Retrieves the name of the campaign." },
          "claim(uint256,address,uint128,bytes32[])": {
            "notice": "Claim airdrop on behalf of eligible recipient and transfer it to the recipient address."
          },
          "claimTo(uint256,address,uint128,bytes32[])": {
            "notice": "Claim airdrop and transfer the tokens to the `to` address."
          },
          "claimViaSig(uint256,address,address,uint128,uint40,bytes32[],bytes)": {
            "notice": "Claim airdrop on behalf of eligible recipient using an EIP-712 or EIP-1271 signature, and transfer the tokens to the `to` address."
          },
          "clawback(address,uint128)": { "notice": "Claws back the unclaimed tokens." },
          "domainSeparator()": {
            "notice": "The domain separator, as required by EIP-712 and EIP-1271, used for signing claim to prevent replay attacks across different campaigns."
          },
          "firstClaimTime()": {
            "notice": "Retrieves the timestamp when the first claim is made, and zero if no claim was made yet."
          },
          "hasClaimed(uint256)": {
            "notice": "Returns a flag indicating whether a claim has been made for a given index."
          },
          "hasExpired()": { "notice": "Returns a flag indicating whether the campaign has expired." },
          "ipfsCID()": { "notice": "The content identifier for indexing the campaign on IPFS." },
          "lowerMinFeeUSD(uint256)": { "notice": "Lowers the min USD fee." },
          "minFeeUSD()": {
            "notice": "Retrieves the min USD fee required to claim the airdrop, denominated in 8 decimals."
          },
          "transferAdmin(address)": { "notice": "Transfers the contract admin to a new address." }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@arbitrum/=node_modules/@arbitrum/",
        "@chainlink/=node_modules/@chainlink/",
        "@eth-optimism/=node_modules/@eth-optimism/",
        "@offchainlabs/=node_modules/@offchainlabs/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@prb/=node_modules/@prb/",
        "@sablier/=node_modules/@sablier/",
        "@scroll-tech/=node_modules/@scroll-tech/",
        "@zksync/=node_modules/@zksync/",
        "forge-std/=node_modules/forge-std/",
        "murky/=node_modules/murky/",
        "openzeppelin-contracts/=node_modules/murky/lib/openzeppelin-contracts/",
        "solady/=node_modules/solady/"
      ],
      "optimizer": { "enabled": true, "runs": 100000000 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": { "src/interfaces/ISablierMerkleInstant.sol": "ISablierMerkleInstant" },
      "evmVersion": "shanghai",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        "urls": [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
        ],
        "license": "MIT"
      },
      "node_modules/@sablier/evm-utils/src/interfaces/IAdminable.sol": {
        "keccak256": "0x3228d63e9b0b951030c73c42bb071e64f0ff0eadbcbeefad3f29a48366539c26",
        "urls": [
          "bzz-raw://acc90ad2bec0e84349b56611b35b56bfb75a5930fd1babb2bd638fbbb15bd126",
          "dweb:/ipfs/QmSLnHx6bo4BQeBKYferfEhZo1Z4xCXdDF1bzJoHUafHt4"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierMerkleBase.sol": {
        "keccak256": "0x822d093de7c9af6aa476b2018402fd53a6caf67aa9454855ff56a0b312abce02",
        "urls": [
          "bzz-raw://44671ca0853c3b45085b956e329f37079591441e240bf65b89e53b2a1ce767f4",
          "dweb:/ipfs/QmSPEA4Z9bwgL7pYjkJPykbnVamLeGACCwMWfmGH58zZu9"
        ],
        "license": "GPL-3.0-or-later"
      },
      "src/interfaces/ISablierMerkleInstant.sol": {
        "keccak256": "0x6ddd0d1535d2c498a70e3d9e9eaf336e155e9340000f6c2bf22009a65ee20a2c",
        "urls": [
          "bzz-raw://5570d60b0f797b55b14a11a5073584b8c1c77edd97a92753feb77e6ddeed60dc",
          "dweb:/ipfs/QmcCvoHVmHwj58j8ivQNq2X7e5ZAq4XGHpUBATH54iT8Hc"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "id": 110
}
